q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin <- max(q15, q30)
}
#forecast what the storage would be in s days given previous âˆ† in S and make those changes over m days
forecastS<-function(s,m,day){
if (day > s+1){
dsdt= (stor[day] - stor[day-s])/s
storF[day] <<- (dsdt*m)+stor[day]
} else {storF[day]<<- stor[day]}
}
#evaluate change in storage in regard to the forecasted storage to prevent going over maxS
#update discharge, change in storage and day+1 storage
evalS<- function(Qin, day, stor, maxS, Qmin,s,m){
if (storF[day] >= maxS[day,m] && day > s+1){ #&& day <188
dsdtMax= (storF[day] - maxS[day,m])/s
qo[day] <- Qmin[day] + (dsdtMax*v2f)
flag = 'TRUE' #true we need to increase ramp rates to get rid of the water
} else {qo[day] <- Qmin[day]
flag='FALSE'}
if (stor[day] > maxAF){
addQ = (stor[day] - maxAF)*v2f
minFCq[day] <- minFCq[day] + addQ
flag= 'TRUE'
} else {flag='FALSE'}
#if the calculated discharge is greater than +/- 500 set it to +/- 500
if (flag == 'TRUE'){ #going over maxS or maxAF
ramp= 1000
} else {ramp = 500}
if (qo[day] > (qo[day-1] + ramp) && day > 2 ){
qo[day] <- qo[day-1] + ramp
} else if (qo[day] < (qo[day-1]-500) && day > 2 ){
qo[day] <- qo[day-1]-500}
###UPDATE here
#this puts a hard constraints on not topping the dam - but doesnt work 21 times
if (availStor[day] <= (1000*v2f)){
qo[day] <- qo[day] + 1000
availStor[day] <- availStor[day] + 1000*f2v
stor[day] <- stor[day] - (1000*f2v)
}
dS[day] <- (Qin[day]- qo[day])*f2v
#dont let storage go below the minimum
if (stor[day] <= minS){
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
#update storage for the next day
if (day < jul){
stor[day+1]<<-stor[day] + dS[day]  #AF in the reservoir
}
#write out values
qo[day]<<-qo[day]
dS[day]<<-dS[day]
}
#determine change in storage and outflow for a given water year and forecast window
outflowStor<-function(s,m){
results<-list()
discharge<-matrix(data=NA, nrow = jul, ncol=21)
for (wy in 1:21){
#   set up blank matricies
#------------------------------------------
stor<<-matrix(data=NA, nrow = jul, ncol = 1)
maxS<<-matrix(data=NA, nrow = jul, ncol = m)
availStor<<-matrix(data=NA, nrow = jul, ncol = 1)
minFCq<<-matrix(data=NA, nrow = jul, ncol = 1)
storF<<-matrix(data=NA, nrow = jul, ncol = 1)
qo<<-matrix(data=NA, nrow = jul, ncol = 1) #modeled outflow from reservoir
dS<<-matrix(data=NA, nrow = jul, ncol = 1)
#---------
# initalize
#-----
stor[1] <<- FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
maxS <<- predMaxS(m) #vector of 198 days of max storage out to M days
#----- run all the functions to get to discharge and updated storage
for (day in 1:jul){
volF<<- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
availStor[day] <<- maxAF-stor[day]
# Min flood control release for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<<-minRelease(day, volF)
} else {
minFCq[day]<<-minReleaseApril(day, volF)
}
#minimum discharge is 240
if (minFCq[day] < minQ){
minFCq[day] <<- minQ
}
forecastS(s,m,day)
evalS(Qin, day, stor, maxS, minFCq, s, m)
}
out<- cbind(maxS[,1], storF, stor, minFCq, qo) #availStor dS, only use one arrow or it will overwrite in global env
colnames(out)<-c('maxS','storF', 'stor', 'minQ', 'qo')
results[[wy]]<-out
#discharge[,wy]<-qo
}
#Q<-c(discharge)
return(results)
}
#s: number of prior days to estimate change in storage
#m: planning window
### Need to figure out how to run the model and save all output so we can do sensitivity analysis on storage:maxStorage and discharge
library(pse)
#define probability function - discrete uniform density function for integer parameters
qdunif<-function(p, min, max){
floor(qunif(p, min, max))}
#wrap model
modelRun<-function(params){
return(mapply(outflowStor, params[,1], params[,2]))
}
#set parameters
q.arg<- list(list("min"=1, "max"=14), list("min"=1, "max"=14))
names(q.arg)<-c("s", "m")
factors<-c("s", "m")
#myLHS<-LHS(model=modelRun, factors, N=100, q='qdunif', q.arg, nboot=4)
n=100
#create hypercube
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
#bothLHS<-tell(bothLHS, bothLHS$data) #res<-get.results(bothLHS)
outB<-modelRun(bothLHS$data)
#pse plots -- not sure how helpful
#plotscatter(bothLHS,index.res=c(5, 8, 10),  add.lm=FALSE)#stack=TRUE, index.res=c(250, 255, 260)
#plotecdf(bothLHS, stack=TRUE)
#plotprcc(bothLHS, stack=TRUE)
#set only S to change
q.argS<- list(list("min"=1, "max"=14), list("min"=6, "max"=8))
sLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argS, nboot=1)
out_S<-modelRun(sLHS$data)
#set only M to change
q.argM<- list(list("min"=6, "max"=8), list("min"=1, "max"=14))
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
out_M<-modelRun(mLHS$data)
cleanData<-function(LHSrun){
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
wy_stor<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
reps = seq(1, length(LHSrun), 21)
count=0
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][,j]<- LHSrun[[reps[j]+count]][,5]
wy_stor[[i]][,j]<- LHSrun[[reps[j]+count]][,3]
}
count=count+1
}
out<-list(wy_Q, wy_stor)
names(out)<-(c("Q", "stor"))
return(out)
}
both<-cleanData(outB)
sOut<-cleanData(out_S)
mOut<-cleanData(out_M)
View(both)
both$Q[1]
a<-both$Q[1]
View(a)
a<-both$Q[[1]]
View(a)
a<-both$Q[[1]][1]
a<-both$Q[[1]][1,]
a<-both$Q[[1]][,1]
overage<-function(LHSout){
days_over<-matrix(data=NA, nrow = 21, ncol = n)
vol_over<-matrix(data=NA, nrow = 21, ncol = n)
for (i in 1:n){
for (wy in 1:21){
wy_dat= LHSout$Q[[wy]][,i]
ids<-which(wy_dat > 10000)
days_over[wy, i] = length(ids)
vol_over[wy, i] =sum(wy_dat[ids]-10000)
}
}
out<-list(days_over, vol_over)
names(out)<-c("days_over", 'vol_over')
return(out)
}
QoverBoth<-overage(both)
View(QoverBoth)
a<-QoverBoth$days_over
View(a)
QoverBoth$days_over[1,]
plot(bothLHS$data['m'], QoverBoth$days_over)
bothLHS$data['m']
overage<-function(LHSout){
days_over<-matrix(data=NA, nrow = n, ncol = 21)
vol_over<-matrix(data=NA, nrow = n, ncol = 21)
for (i in 1:n){
for (wy in 1:21){
wy_dat= LHSout$Q[[wy]][,i]
ids<-which(wy_dat > 10000)
days_over[i, wy] = length(ids)
vol_over[i, wy] =sum(wy_dat[ids]-10000)
}
}
out<-list(days_over, vol_over)
names(out)<-c("days_over", 'vol_over')
return(out)
}
QoverBoth<-overage(both)
View(QoverBoth)
a<-QoverBoth$days_over
View(a)
plt.overage<-funtion(params, overageData){
#par(mfrow(c(2,2)))
plt<- plot(params$m, overageData$days_over[1,])+
for (i in 2:21){
plot(params$m, overageData$days_over[i,], add=TRUE)
}
#plot(params$s, overageData$days_over)
#plot(params$m, vol_over[1,])
#plot(params$s, vol_over[1,])
return(plt)
}
plt.overage<-funtion(params, overageData){
#par(mfrow(c(2,2)))
plt<- plot(params$m, overageData$days_over[1,])
for (i in 2:21){
plot(params$m, overageData$days_over[i,], add=TRUE)
}
#plot(params$s, overageData$days_over)
#plot(params$m, vol_over[1,])
#plot(params$s, vol_over[1,])
return(plt)
}
plt_overage<-funtion(params, overageData){
#par(mfrow(c(2,2)))
plt<- plot(params$m, overageData$days_over[1,])
for (i in 2:21){
plot(params$m, overageData$days_over[i,], add=TRUE)
}
#plot(params$s, overageData$days_over)
#plot(params$m, vol_over[1,])
#plot(params$s, vol_over[1,])
return(plt)
}
plt_overage<-function(params, overageData){
#par(mfrow(c(2,2)))
plt<- plot(params$m, overageData$days_over[1,])
for (i in 2:21){
plot(params$m, overageData$days_over[i,], add=TRUE)
}
#plot(params$s, overageData$days_over)
#plot(params$m, vol_over[1,])
#plot(params$s, vol_over[1,])
return(plt)
}
plt_overage<-function(params, overageData){
#par(mfrow(c(2,2)))
plt<- plot(params['m'], overageData$days_over[1,])
for (i in 2:21){
plot(params['m'], overageData$days_over[i,], add=TRUE)
}
#plot(params$s, overageData$days_over)
#plot(params$m, vol_over[1,])
#plot(params$s, vol_over[1,])
return(plt)
}
plt_overage(bothLHS$data, QoverBoth)
View(QoverBoth)
a<-as.data.frame(QoverBoth$days_over)
View(a)
plot(a[1,], bothLHS$data['m'])
plot(a[1,], bothLHS$data['m'])
a[1,]
plot(a[,1], bothLHS$data['m'])
a[,1]
bothLHS$data['m']
a<-QoverBoth$days_over
plot(a[,1], bothLHS$data['m'])
View(a)
dim(a[,1])
dim(a)
dim(bothLHS$data['m'])
a<-as.numeric(QoverBoth$days_over)
a<-QoverBoth$days_over
x<-a[,1]
y<-bothLHS$data['m']
View(y)
x<-as.array(a[,1])
x<-as.matrix(a[,1])
View(x)
class(x)
class(y)
x<-as.data.frame(a[,1])
plot(x,y)
x<-as.data.frame(a[,1])
y<-bothLHS$data['m']
scatter(x,y)
scatterplot(x,y)
plot(x,y)
View(x)
x<-as.numeric(as.data.frame(a[,1]))
y<-as.numeric(bothLHS$data['m'])
plot(x[,],y[,])
for (i in 1:21){
x<-as.data.frame(a[,i])
y<-bothLHS$data['m']
plot(x[,],y[,])
}
i=1
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,])
for (i in 1:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,], add=TRUE)
}
i=2
warnings()
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,])
i=6
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,])
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit")
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days")
for (i in 1:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days")
}
for (i in 1:21){
y<-as.data.frame(a[,i])
y[y == 0] <- NA
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days")
}
for (i in 1:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days")
}
for (i in 1:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35))
}
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19)
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19)
}
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=blue)
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col='blue')
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19)
}
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 75), pch=19, col='blue')
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19)
}
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 85), pch=19, col='blue')
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19)
}
cols<-color(pal(21))
cols<-colors(pal(21))
pal <- colorRampPalette(c("yellow", "green", "blue"))
cols<-colors(pal(21))
cols<-pal(21)
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=cols(1))
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19, col=cols(i))
}
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19, col=cols[i])
}
OutSum<-matrix(data=NA, nrow = jul, ncol = 100)
obsSum<-matrix(data=NA, nrow = jul, ncol = 21)
for (wy in 1:21){
obsSum[,wy]<-cumsum(FC$Qo[FC$WY == wy])
q=out[FC$WY == wy]
for (i in 1:100){
OutSum[,i]<-cumsum(q[,i])
}
}
View(res)
View(FC)
obsSum<-matrix(data=NA, nrow = jul, ncol = 21)
for (wy in 1:21){
obsSum[,wy]<-cumsum(FC$Qo[FC$WY == wy])
}
wy=1
obsSum<-matrix(data=NA, nrow = jul, ncol = 21)
obsSum[,wy]<-cumsum(FC$Qo[FC$WY == wy])
for (wy in 1:21){
obsSum[wy,]<-cumsum(FC$Qo[FC$WY == wy])
}
cumsum(FC$Qo[FC$WY == wy])
obsSum[,wy]<-cumsum(FC$Qo[FC$WY == yrs[wy]])
for (wy in 1:21){
obsSum[,wy]<-cumsum(FC$Qo[FC$WY == yrs[wy]])
}
View(obsSum)
inflSum<-matrix(data=NA, nrow = jul, ncol = 21)
for (wy in 1:21){
inflSum[,wy]<-cumsum(FC$Q[FC$WY == yrs[wy]])
}
totQ<-inflSum[jul,]
colRamp<-pal(21)[as.numeric(cut(totQ,breaks = 21))]
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19, col=colRamp)
}
plt_overage<-function(LHSout, params){
Qover<-overage(LHSout)
a<-Qover$days_over
y<-as.data.frame(a[,1])
x<-bothLHS$data['m']
plt<- plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data['m']
points(x[,],y[,], pch=19, col=colRamp)
}
return(plt)
}
plt_overage(both, bothLHS$data)
plt_overage(both, bothLHS$data)
plt_overage<-function(LHSout, params, sm){
Qover<-overage(LHSout)
a<-Qover$days_over
y<-as.data.frame(a[,1])
x<-bothLHS$data[sm]
plt<- plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data[sm]
points(x[,],y[,], pch=19, col=cols[i]) #color ramp isnt quite right
}
return(plt)
}
plt_overage(both, bothLHS$data, 'm')
plt_overage<-function(LHSout, params, sm){
Qover<-overage(LHSout)
a<-Qover$days_over
y<-as.data.frame(a[,1])
x<-bothLHS$data[sm]
plt<- plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 75), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data[sm]
points(x[,],y[,], pch=19, col=cols[i]) #color ramp isnt quite right
}
return(plt)
}
plt_overage(both, bothLHS$data, 'm')
plt_overage<-function(LHSout, params, sm){
Qover<-overage(LHSout)
a<-Qover$days_over
y<-as.data.frame(a[,1])
x<-bothLHS$data[sm]
plt<- plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 85), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data[sm]
points(x[,],y[,], pch=19, col=cols[i]) #color ramp isnt quite right
}
return(plt)
}
plt_overage(both, bothLHS$data, 'm')
plt_overage(mOut, mLHS$data, 'm')
plt_overage(sOut, sLHS$data, 's')
plt_overage<-function(LHSout, params, sm){
Qover<-overage(LHSout)
a<-Qover$days_over
y<-as.data.frame(a[,1])
x<-bothLHS$data[sm]
plt<- plot(x[,],y[,], ylab="Days Over Discharge Limit", xlab="Discharge Planning Days", ylim=c(0.5, 35), pch=19, col=cols[1])
for (i in 2:21){
y<-as.data.frame(a[,i])
x<-bothLHS$data[sm]
points(x[,],y[,], pch=19, col=cols[i]) #color ramp isnt quite right
}
return(plt)
}
plt_overage(sOut, sLHS$data, 's')
plt_overage(mOut, mLHS$data, 'm')
