prjAP<-read.csv("Data/Inflw_prjAPril1.csv") #coefficients for projection eqn after April 1
wfc<-read.csv("Data/plate7-2.csv") #winter flood control space
qlim<- read.csv("Data/MaxQ.csv", header = FALSE) #discharge mins and maxes
#conversions from vol to flow (ac-ft to cfs)
v2f<-43560.000443512/(24*60*60)
f2v<-24*60*60*.0000229569
#Reservoir Storage from WCM
minQ<-240
maxAF<-1010188
minS<-  41000 +11630+ 28767 #total inactive capacity AND, ARK, LP
#subset (DOY 1: July 31st) from full timeseries -----
jul=196 #change to 212 #july 31st once update fcVol csv
reps <-100
idx<-which(res$doy >= 1 & res$doy <= jul)
rows<- length(idx)
FC<- data.frame(res$doy[idx],res$WY[idx], res$totAF[idx], res$in_unreg[idx], res$qo[idx])
colnames(FC)<-c("doy", "WY", "AF", "Q", "Qo")
yrs<- 1998:2018
#calculate daily forecast values
forecast<-read.csv("Data/LP_coordinatedForecasts.csv")
volF<-vector(length = nrow(FC))
for (i in 1:nrow(FC)){
if (any(forecast$wy == FC$WY[i] & forecast$doy == FC$doy[i])){
ii=which(forecast$wy == FC$WY[i] & forecast$doy == FC$doy[i])
volF[i] <- forecast$ForecastVol[ii]
} else{volF[i] <- volF[i-1] - FC$Q[i-1]*f2v}
}
FC<-cbind(FC, volF)
FC$volF[FC$volF < 0] <- 0
#find the index of the first doy
doy1<-matrix(data=NA, ncol=1, nrow=21)
for (wy in 1:21){
doy1[wy]<- which(FC$WY == yrs[wy] & FC$doy == 1)
}
##--------------------------------------
#       DEFINE FUNCTIONS
##--------------------------------------
##INITALIZE storF with the intial storage of the reservoir
# REQUIRED storage - lookup day of year, inflow volume ----
# plate 7-1 and plate 7-3 - Needs sum of timeseries
reqStor<- function(sumQin,doy){
fvol<-round(sumQin/1000000, digits=1)
fcol<- as.numeric(fv$col[fv$fv == fvol])
fcs<- as.numeric(fcVol[doy, fcol+2])
#Winter flood control space (low flow years Plate 7-2) ----
if (doy < 91 && fvol > 1.2 && fvol < 1.8){
wcol<- as.numeric(fv$wcol[fv$wfc == fvol])
fcs<- as.numeric(wfc[doy,wcol])
}
if (is.na(fcs) == TRUE){
fcs<- as.numeric(fcVol[doy, fcol+2])
}
#required flood control space (storage volume)
return(fcs)
}
#predict max storage in the next m days
predMaxS<- function(m){
for (day in 1:jul){
volF <- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
count=0
if (volF >= 0 && day < (jul-m)){
for (it in day:(day+m-1)){
count=count+1
vF = volF - (volF/(jul-day))*(day-it) #predict maxS given equal distribution of inflow
reqS <- reqStor(vF, it)
maxS[day, count] <- (maxAF-reqS) #max storage today given the whole years inflow
}
} else {storD <- 0}
maxS[is.na(maxS)]<- maxAF
}
return(maxS)
}
#determine minimum daily release before April 1
minRelease<- function(day, volF){
ix= which(prj$start <= day & prj$end >= day)
vol1 = volF*prj$b[ix] + prj$c[ix]
if (prj$start[ix] != day){
vol2 = volF*prj$b[ix+1] + prj$c[ix+1]
frac = (day - prj$start[ix])/(prj$end[ix]-prj$start[ix])
volFmar <-  frac*vol1 + (1-frac)*vol2
} else {volFmar = vol1}
volFresid <- volF - volFmar
FCvolAP<- reqStor(volFresid, 91) #flood control space required on april 1
minEvac<- FCvolAP - availStor[day] #minimum evaculation btw today and April 1
minReleaseVol <- minEvac+volFmar
Qmin <- (minReleaseVol*v2f)/(jul-day+1) #associated  qmin
##If statements that constrain for high flows and ramp rates?
}
#determine minimum daily release after April 1
minReleaseApril<-function(day, volF){
ix30 = findInterval(day, prjAP$doy)
ix15=ix30-1
volF_target15 <- volF*prjAP$b[ix15] + prjAP$c[ix15]
volF_target30 <- volF*prjAP$b[ix30] + prjAP$c[ix30]
residual15<- volF-volF_target15
residual30<- volF- volF_target30
if (day < jul-30){
FCvol30<- reqStor(residual30, day+30) #required storage space
minEvac30 <- FCvol30 - availStor[day]
minReleaseVol30 <- minEvac30 + volF_target30
q30<-(minReleaseVol30*v2f)/(jul-day+1)
} else {q30 <- minQ}
if (day < jul-15){
FCvol15<-reqStor(residual15, day+15)
minEvac15 <- FCvol15 - availStor[day]
minReleaseVol15 <- minEvac15 + volF_target15
q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin <- max(q15, q30)
}
#forecast what the storage would be in s days given previous âˆ† in S and make those changes over m days
forecastS<-function(s,m,day){
if (day > s+1){
dsdt= (stor[day] - stor[day-s])/s
storF[day] <<- (dsdt*m)+stor[day]
} else {storF[day]<<- stor[day]}
}
#evaluate change in storage in regard to the forecasted storage to prevent going over maxS
#update discharge, change in storage and day+1 storage
evalS<- function(Qin, day, stor, maxS, Qmin,s,m){
if (storF[day] >= maxS[day,m] && day > s+1){ #&& day <188
dsdtMax= (storF[day] - maxS[day,m])/s
qo[day] <- Qmin[day] + (dsdtMax*v2f)
flag = 'TRUE' #true we need to increase ramp rates to get rid of the water
} else {qo[day] <- Qmin[day]
flag='FALSE'}
if (stor[day] > maxAF){
addQ = (stor[day] - maxAF)*v2f
minFCq[day] <- minFCq[day] + addQ
flag= 'TRUE'
} else {flag='FALSE'}
#if the calculated discharge is greater than +/- 500 set it to +/- 500
if (flag == 'TRUE'){ #going over maxS or maxAF
ramp= 1000
} else {ramp = 500}
if (qo[day] > (qo[day-1] + ramp) && day > 2 ){
qo[day] <- qo[day-1] + ramp
} else if (qo[day] < (qo[day-1]-500) && day > 2 ){
qo[day] <- qo[day-1]-500}
###UPDATE here
#this puts a hard constraints on not topping the dam - but doesnt work 21 times
if (availStor[day] <= (1000*v2f)){
qo[day] <- qo[day] + 1000
availStor[day] <- availStor[day] + 1000*f2v
stor[day] <- stor[day] - (1000*f2v)
}
dS[day] <- (Qin[day]- qo[day])*f2v
#dont let storage go below the minimum
if (stor[day] <= minS){
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
#update storage for the next day
if (day < jul){
stor[day+1]<<-stor[day] + dS[day]  #AF in the reservoir
}
#write out values
qo[day]<<-qo[day]
dS[day]<<-dS[day]
}
#determine change in storage and outflow for a given water year and forecast window
outflowStor<-function(s,m){
results<-list()
discharge<-matrix(data=NA, nrow = jul, ncol=21)
for (wy in 1:21){
#   set up blank matricies
#------------------------------------------
stor<<-matrix(data=NA, nrow = jul, ncol = 1)
maxS<<-matrix(data=NA, nrow = jul, ncol = m)
availStor<<-matrix(data=NA, nrow = jul, ncol = 1)
minFCq<<-matrix(data=NA, nrow = jul, ncol = 1)
storF<<-matrix(data=NA, nrow = jul, ncol = 1)
qo<<-matrix(data=NA, nrow = jul, ncol = 1) #modeled outflow from reservoir
dS<<-matrix(data=NA, nrow = jul, ncol = 1)
#---------
# initalize
#-----
stor[1] <<- FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
maxS <<- predMaxS(m) #vector of 198 days of max storage out to M days
#----- run all the functions to get to discharge and updated storage
for (day in 1:jul){
volF<<- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
availStor[day] <<- maxAF-stor[day]
# Min flood control release for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<<-minRelease(day, volF)
} else {
minFCq[day]<<-minReleaseApril(day, volF)
}
#minimum discharge is 240
if (minFCq[day] < minQ){
minFCq[day] <<- minQ
}
forecastS(s,m,day)
evalS(Qin, day, stor, maxS, minFCq, s, m)
}
#out<<- cbind(maxS[,1],availStor, storF, stor, dS, minFCq, qo)
#colnames(out)<-c('maxS', 'availStor', 'storF', 'stor', 'dS', 'minFCq', 'qo')
#results[[wy]]<-out
discharge[,wy]<-qo
}
Q<-c(discharge)
return(Q)
}
m=10
s=5
library(pse)
#define probability function
qdunif<-function(p, min, max){
floor(qunif(p, min, max))}
#wrap model
modelRun<-function(params){
return(mapply(outflowStor, params[,1], params[,2]))
}
#set parameters
q.arg<- list(list("min"=1, "max"=10), list("min"=1, "max"=15))
names(q.arg)<-c("s", "m")
factors<-c("s", "m")
#create hypercube
bothLHS <-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
bothparams<-bothLHS$data
q.arg<- list(list("min"=1, "max"=10), list("min"=7, "max"=7))
sLHS<-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
Sparams<-sLHS$data
qunif(5, 5)
qunif(5, 8)
q.arg<- list(list("min"=1, "max"=10), list("min"=7, "max"=8))
sLHS<-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
Sparams<-sLHS$data
q.arg<- list(list("min"=1, "max"=10), list("min"=6, "max"=8))
sLHS<-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
Sparams<-sLHS$data
View(Sparams)
q.arg<- list(list("min"=4, "max"=6), list("min"=1, "max"=15))
mLHS<-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
Mparams<-mLHS$data
View(Mparams)
#set only S to change
q.arg<- list(list("min"=1, "max"=10), list("min"=6, "max"=8))
sLHS<-LHS(model = NULL, factors, N=50, q='qdunif', q.arg, nboot=4)
Sparams<-sLHS$data
#set only M to change
q.arg<- list(list("min"=4, "max"=6), list("min"=1, "max"=15))
mLHS<-LHS(model = NULL, factors, N=50, q='qdunif', q.arg, nboot=4)
Mparams<-mLHS$data
out<-modelRun(bothparams)
out_S<-modelRun(Sparams)
out_M<-modelRun(Mparams)
OutMeans<-matrix(data=NA, nrow = 4116, ncol = 3)
OutMeans[1]<-rowMeans(out, na.rm = FALSE, dims = 1)
OutMeans[2]<-rowMeans(out_S, na.rm = FALSE, dims = 1)
OutMeans[3]<-rowMeans(out_M, na.rm = FALSE, dims = 1)
View(out)
dim(out)
OutMeans[,1]<-rowMeans(out, na.rm = FALSE, dims = 1)
OutMeans[,2]<-rowMeans(out_S, na.rm = FALSE, dims = 1)
OutMeans[,3]<-rowMeans(out_M, na.rm = FALSE, dims = 1)
matplot(OutMeans)
matplot(OutMeans, type='l')
matplot(out_S, type='l')
matplot(out_M, type='l')
matplot(out, type='l')
z<-quantile(out, c(.10, .90))
z<-apply(out, 1, quantile, probs = c(0.10, 0.9),  na.rm = TRUE)
View(z)
plot(OutMeans[,1], type='l', lwd='2')
lines(z, type='l')
lines(z, type='l')
plot(OutMeans[,1], type='l', lwd='2')
lines(z[,1], type='l', col='blue')
matplot(z, type='l', col='blue')
plot(z[,1], type='l', col='blue')
View(z)
source('~/Documents/GitRepos/ReservoirModeling/Sensitivity_analysis.R', echo=TRUE)
plot(z[1,], type='l', col='blue')
lines(1:4116, z[2,], type='l', col='blue')
lines(1:4116, OutMeans[,1], type='l', lwd='2')
zS<-apply(out, 1, quantile, probs = c(0.10, 0.9),  na.rm = TRUE)
zM<-apply(out, 1, quantile, probs = c(0.10, 0.9),  na.rm = TRUE)
plot(zS[1,], type='l', col='blue')
lines(1:4116, zS[2,], type='l', col='blue')
lines(1:4116, OutMeans[,2], type='l', lwd='2')
plot(zM[1,], type='l', col='blue')
lines(1:4116, zM[2,], type='l', col='blue')
lines(1:4116, OutMeans[,3], type='l', lwd='2')
z<-apply(out, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
zS<-apply(out, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
zM<-apply(out, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
par(mfrow=c(3,1))
plot(OutMeans[,1], type='l', lwd='2')
lines(1:4116, z[2,], type='l', col='blue')
lines(1:4116, z[1,], type='l', col='blue' )
plot(OutMeans[,2], type='l', lwd='2')
lines(1:4116, zS[2,], type='l', col='blue')
lines(1:4116, zS[1,], type='l', col='blue')
plot(OutMeans[,3], type='l', lwd='2')
lines(1:4116, zM[2,], type='l', col='blue')
lines(1:4116, zM[1,], type='l', col='blue')
#set only M to change
q.arg<- list(list("min"=4, "max"=6), list("min"=1, "max"=25))
mLHS<-LHS(model = NULL, factors, N=50, q='qdunif', q.arg, nboot=4)
Mparams<-mLHS$data
out_M<-modelRun(Mparams)
OutMeans<-matrix(data=NA, nrow = 4116, ncol = 3)
OutMeans[,1]<-rowMeans(out, na.rm = FALSE, dims = 1)
OutMeans[,2]<-rowMeans(out_S, na.rm = FALSE, dims = 1)
OutMeans[,3]<-rowMeans(out_M, na.rm = FALSE, dims = 1)
z<-apply(out, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
zS<-apply(out, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
zM<-apply(out, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
par(mfrow=c(3,1))
plot(OutMeans[,1], type='l', lwd='2')
lines(1:4116, z[2,], type='l', col='blue')
lines(1:4116, z[1,], type='l', col='blue' )
plot(OutMeans[,2], type='l', lwd='2')
lines(1:4116, zS[2,], type='l', col='blue')
lines(1:4116, zS[1,], type='l', col='blue')
plot(OutMeans[,3], type='l', lwd='2')
lines(1:4116, zM[2,], type='l', col='blue')
lines(1:4116, zM[1,], type='l', col='blue')
View(Sparams)
plot(OutMeans[,1], type='l', lwd='2')
lines(1:4116, OutMeans[,2], type='l', lwd='1', col='blue')
lines(1:4116, OutMeans[,2], type='l', lwd='1', co='green')
par(mfrow=c(1,1))
plot(OutMeans[,1], type='l', lwd='2')
lines(1:4116, OutMeans[,2], type='l', lwd='1', col='blue')
lines(1:4116, OutMeans[,2], type='l', lwd='1', co='green')
OutMeans[,1]<-rowMeans(out, na.rm = FALSE, dims = 1)
par(mfrow=c(1,1))
plot(OutMeans[,1], type='l', lwd='2')
lines(1:4116, OutMeans[,2], type='l', lwd='1', col='blue')
lines(1:4116, OutMeans[,3], type='l', lwd='1', col='green')
lines(1:4116, 10000, type="3", color="grey")
lines(1:4116, rep(10000, 4116), type="3", color="grey")
lines(1:4116, rep(10000, 4116), type="3", col="grey")
lines(1:4116, rep(10000, 4116), lty="3", col="grey")
lines(1:4116, rep(10000, 4116), lty=3, col="grey")
which(out[,i1 > 10000)
which(out[,1] > 10000)
i=1
ids<-which(out[,i] > 10000)
10000 - out[ids,i]
out[ids,i] -10000
sum(out[ids,i] -10000)
wy_out= out[FC$WY==wy,]
ids<-which(wy_out[i] > 10000)
View(wy_out)
wy=1
wy_out= out[FC$WY== wy,]
View(wy_out)
View(FC)
wy_out= out[FC$WY == yrs[wy],]
ids<-which(wy_out[i] > 10000)
View(wy_out)
days_over<-matrix(data=NA, nrow = 21, ncol = 100)
vol_over<-matrix(data=NA, nrow = 21, ncol = 100)
for (i in 1: 100){
for (wy in 1:21){
wy_out= out[FC$WY == yrs[wy],]
ids<-which(wy_out[i] > 10000)
days_over[wy, i] = length(ids)
vol_over[wy, i] =sum(out[ids,i] -10000)
}
}
View(days_over)
View(vol_over)
wy_out= out[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
ids
i=3
wy_out= out[FC$WY == yrs[wy],i]
wy_out= out[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over[wy, i] = length(ids)
View(days_over)
vol_over[wy, i] =sum(out[ids,i] -10000)
i=1
wy=1
wy_out= out[FC$WY == yrs[wy],i]
plot(wy_out, type='l')
max(wy_out)
max(wy_out)-10000
which(wy_out > 10000)
length(which(wy_out > 10000))
ids<-which(wy_out > 10000)
ids
vol_over[wy, i] =sum(wy_out[ids,i] -10000)
vol_over[wy, i] =sum(wy_out[ids] -10000)
View(vol_over)
days_over<-matrix(data=NA, nrow = 21, ncol = 100)
vol_over<-matrix(data=NA, nrow = 21, ncol = 100)
for (i in 1: 100){
for (wy in 1:21){
wy_out= out[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over[wy, i] = length(ids)
vol_over[wy, i] =sum(wy_out[ids] -10000)
}
}
View(bothparams)
plot(bothparams$m, vol_over[1,])
plot(bothparams$s, vol_over[1,])
###s
days_over_S<-matrix(data=NA, nrow = 21, ncol = 50)
vol_over_S<-matrix(data=NA, nrow = 21, ncol = 50)
for (i in 1: 50){
for (wy in 1:21){
wy_out= out_S[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over[wy, i] = length(ids)
vol_over[wy, i] =sum(wy_out[ids] -10000)
}
}
plot(Sparams$m, vol_over[1,])
plot(Sparams$s, vol_over[1,])
days_over_S<-matrix(data=NA, nrow = 21, ncol = 50)
vol_over_S<-matrix(data=NA, nrow = 21, ncol = 50)
for (i in 1: 50){
for (wy in 1:21){
wy_out= out_S[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over_S[wy, i] = length(ids)
vol_over_S[wy, i] =sum(wy_out[ids] -10000)
}
}
plot(Sparams$m, vol_over_S[1,])
plot(Sparams$s, vol_over_S[1,])
###M
days_over_M<-matrix(data=NA, nrow = 21, ncol = 50)
vol_over_M<-matrix(data=NA, nrow = 21, ncol = 50)
for (i in 1: 50){
for (wy in 1:21){
wy_out= out_M[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over_M[wy, i] = length(ids)
vol_over_M[wy, i] =sum(wy_out[ids] -10000)
}
}
plot(Mparams$m, vol_over_M[1,])
plot(Mparams$s, vol_over_M[1,])
#set only M to change
q.arg<- list(list("min"=3, "max"=6), list("min"=1, "max"=15))
mLHS<-LHS(model = NULL, factors, N=50, q='qdunif', q.arg, nboot=4)
Mparams<-mLHS$data
out_M<-modelRun(Mparams)
q.arg<- list(list("min"=3, "max"=6), list("min"=1, "max"=15))
mLHS<-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
Mparams<-mLHS$data
out_M<-modelRun(Mparams)
days_over_M<-matrix(data=NA, nrow = 21, ncol = 100)
vol_over_M<-matrix(data=NA, nrow = 21, ncol = 100)
for (i in 1: 100){
for (wy in 1:21){
wy_out= out_M[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over_M[wy, i] = length(ids)
vol_over_M[wy, i] =sum(wy_out[ids] -10000)
}
}
plot(Mparams$m, vol_over_M[1,])
plot(Mparams$s, vol_over_M[1,])
#set only M to change
q.arg<- list(list("min"=2, "max"=6), list("min"=1, "max"=15))
mLHS<-LHS(model = NULL, factors, N=100, q='qdunif', q.arg, nboot=4)
Mparams<-mLHS$data
out_M<-modelRun(Mparams)
###M
days_over_M<-matrix(data=NA, nrow = 21, ncol = 100)
vol_over_M<-matrix(data=NA, nrow = 21, ncol = 100)
for (i in 1: 100){
for (wy in 1:21){
wy_out= out_M[FC$WY == yrs[wy],i]
ids<-which(wy_out > 10000)
days_over_M[wy, i] = length(ids)
vol_over_M[wy, i] =sum(wy_out[ids] -10000)
}
}
plot(Mparams$m, vol_over_M[1,])
plot(Mparams$s, vol_over_M[1,])
plot(Mparams$m, days_over_M[1,])
plot(Mparams$s, days_over_M[1,])
View(zM)
View(vol_over)
plot(bothparams$m, vol_over[1,])
plot(bothparams$s, vol_over[1,])
sd_all<- apply(out, 1, sd)
zS<-apply(out_S, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
zM<-apply(out_M, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
par(mfrow=c(3,1))
plot(OutMeans[,1], type='l', lwd='2')
lines(1:4116, z[2,], type='l', col='blue')
lines(1:4116, z[1,], type='l', col='blue' )
plot(OutMeans[,2], type='l', lwd='2')
lines(1:4116, zS[2,], type='l', col='blue')
lines(1:4116, zS[1,], type='l', col='blue')
plot(OutMeans[,3], type='l', lwd='2')
lines(1:4116, zM[2,], type='l', col='blue')
lines(1:4116, zM[1,], type='l', col='blue')
sd_all<- apply(out, 1, sd)
sd_S<- apply(out_S, 1, sd)
sd_M<- apply(out_M, 1, sd)
View(out)
View(out)
plot(sd_all)
plot(sd_all, type='l')
plot(sd_all, type='l')
par(mfrow=c(1,1))
plot(sd_all, type='l')
lines(1:4116, sd_S, type='l', col='green')
lines(1:4116, sd_M, type='l', col='blue')
