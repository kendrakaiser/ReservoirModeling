minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
#min discharge today given forecasted storage in the next n days
#add variables for surplus storage and associated Qmin
resS <- changeS(Qin, day, stor, maxS[day], minFCq)
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#rr=ramprate(qo, stor)
#save intial run output ----  # change for debugging - put clear matricies at beginning
FC$qo[FC$WY == yrs[wy]]<-qo[,]   #rr$qo
FC$stor[FC$WY == yrs[wy]]<-stor[,]   #rr#stor
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-minFCq[,]
}
#plot the initial results
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
changeS<- function(Qin, day, stor, maxS, Qmin){ #consider if these all need to be here
if (stor[day] >= maxS) {#if S > max AF, change of volume in reservoir
dS[day] <- maxS - stor[day] - (Qin[day]*f2v) #calculate ∆ volume of water in the reservoir
qo[day] <- -dS[day]*v2f
} else if (day > 91 && minFCq[day] > minFCq [day-1]) {
qo[day] <- qo[day-1] + 500 #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
dS[day] <- (Qin[day]- qo[day])*f2v
} else if (day > 91 && minFCq[day] <= minFCq[day-1]) {
qo[day] <- qo[day-1] - 500
dS[day] <- (Qin[day]- qo[day])*f2v
#} else if (day > 1) {
# qo[day] <- qo[day-1] #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
#dS[day] <- (Qin[day]- qo[day])*f2v
} else {
qo[day] <- minQ #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
dS[day] <- (Qin[day]- qo[day])*f2v
}
if (stor[day] <= minS){ #dont let storage go below the minimum
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
if (day < jul){
stor[day+1]<-stor[day] + dS[day]  #AF in the reservoir
}
outlist<-(list("stor"=stor, "dS"=dS, "qo"=qo, "day"=day))
return(outlist)
}
#determine minimum daily release before April 1
minRelease<- function(){
ix= which(prj$start <= day & prj$end >= day)
vol1 = volF*prj$b[ix] + prj$c[ix]
if (prj$start[ix] != day){
vol2 = volF*prj$b[ix+1] + prj$c[ix+1]
frac = (day - prj$start[ix])/(prj$end[ix]-prj$start[ix])
volFmar <-  frac*vol1 + (1-frac)*vol2
} else {volFmar = vol1}
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
minEvac<- FCvolAP$stor - stor[day] #minimum evaculation btw today and April 1
minReleaseVol <- minEvac+volFmar
Qmin<- (minReleaseVol*v2f)/(jul-day+1) #associated  qmin
##If statements that constrain for high flows and ramp rates
}
#determine minimum daily release after April 1
minReleaseApril<-function(){
ix30 = findInterval(day, prjAP$doy)
ix15=ix30-1
volF_target15 <- volF*prjAP$b[ix15] + prjAP$c[ix15]
volF_target30 <- volF*prjAP$b[ix30] + prjAP$c[ix30]
residual15<- volF-volF_target15
residual30<- volF- volF_target30
if (day < jul-30){
FCvol30<- resStor(residual30, day+30)
minEvac30 <- FCvol30$stor - stor[day]
minReleaseVol30 <- minEvac30 + volF_target30
q30<-(minReleaseVol30*v2f)/(jul-day+1)
} else {q30 <- minQ}
if (day < jul-15){
FCvol15<-resStor(residual15, day+15)
minEvac15 <- FCvol15$stor - stor[day]
minReleaseVol15 <- minEvac15 + volF_target15
q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin<- max(q15, q30)
}
#Ramping rate is +/- 500 cfs per day  --> distributes the water over following days
ramprate <- function(qo, stor){
for (day in 1:jul){
if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
Q=qo[day]
qo[day] <- qo[day-1]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
}else if (day >10 && qo[day] > (qo[day-1] + 500)){
#todays qo > 500cfs than yesterday
#kinda works - line by line, but something is wrong w looping or something
Q=qo[day]
qo[day] <- qo[day-1]+500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} else{qo[day]<-qo[day]}
}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
#-------------------------------------------------------------
#   set up blank matricies
#------------------------------------------------------------
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
minFCq=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#---------------------------------------------------------------
#   determine change in storage and outflow for any day of year
#---------------------------------------------------------------
#select Qin from matrix or array? - turn into funtion
for (wy in 1){
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Qmin for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
#min discharge today given forecasted storage in the next n days
#add variables for surplus storage and associated Qmin
resS <- changeS(Qin, day, stor, maxS[day], minFCq)
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#rr=ramprate(qo, stor)
#save intial run output ----  # change for debugging - put clear matricies at beginning
FC$qo[FC$WY == yrs[wy]]<-qo[,]   #rr$qo
FC$stor[FC$WY == yrs[wy]]<-stor[,]   #rr#stor
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-minFCq[,]
}
#plot the initial results
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
for (wy in 1){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
changeS<- function(Qin, day, stor, maxS, Qmin){ #consider if these all need to be here
if (stor[day] >= maxS) {#if S > max AF, change of volume in reservoir
dS[day] <- maxS - stor[day] - (Qin[day]*f2v) #calculate ∆ volume of water in the reservoir
qo[day] <- -dS[day]*v2f
} else if (day > 21 && minFCq[day] > minFCq [day-1]) {
qo[day] <- qo[day-1] + 500 #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
dS[day] <- (Qin[day]- qo[day])*f2v
} else if (day > 21 && minFCq[day] <= minFCq[day-1]) {
qo[day] <- qo[day-1] - 500
dS[day] <- (Qin[day]- qo[day])*f2v
#} else if (day > 1) {
# qo[day] <- qo[day-1] #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
#dS[day] <- (Qin[day]- qo[day])*f2v
} else {
qo[day] <- minQ #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
dS[day] <- (Qin[day]- qo[day])*f2v
}
if (stor[day] <= minS){ #dont let storage go below the minimum
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
if (day < jul){
stor[day+1]<-stor[day] + dS[day]  #AF in the reservoir
}
outlist<-(list("stor"=stor, "dS"=dS, "qo"=qo, "day"=day))
return(outlist)
}
#determine minimum daily release before April 1
minRelease<- function(){
ix= which(prj$start <= day & prj$end >= day)
vol1 = volF*prj$b[ix] + prj$c[ix]
if (prj$start[ix] != day){
vol2 = volF*prj$b[ix+1] + prj$c[ix+1]
frac = (day - prj$start[ix])/(prj$end[ix]-prj$start[ix])
volFmar <-  frac*vol1 + (1-frac)*vol2
} else {volFmar = vol1}
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
minEvac<- FCvolAP$stor - stor[day] #minimum evaculation btw today and April 1
minReleaseVol <- minEvac+volFmar
Qmin<- (minReleaseVol*v2f)/(jul-day+1) #associated  qmin
##If statements that constrain for high flows and ramp rates
}
#determine minimum daily release after April 1
minReleaseApril<-function(){
ix30 = findInterval(day, prjAP$doy)
ix15=ix30-1
volF_target15 <- volF*prjAP$b[ix15] + prjAP$c[ix15]
volF_target30 <- volF*prjAP$b[ix30] + prjAP$c[ix30]
residual15<- volF-volF_target15
residual30<- volF- volF_target30
if (day < jul-30){
FCvol30<- resStor(residual30, day+30)
minEvac30 <- FCvol30$stor - stor[day]
minReleaseVol30 <- minEvac30 + volF_target30
q30<-(minReleaseVol30*v2f)/(jul-day+1)
} else {q30 <- minQ}
if (day < jul-15){
FCvol15<-resStor(residual15, day+15)
minEvac15 <- FCvol15$stor - stor[day]
minReleaseVol15 <- minEvac15 + volF_target15
q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin<- max(q15, q30)
}
#Ramping rate is +/- 500 cfs per day  --> distributes the water over following days
ramprate <- function(qo, stor){
for (day in 1:jul){
if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
Q=qo[day]
qo[day] <- qo[day-1]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
}else if (day >10 && qo[day] > (qo[day-1] + 500)){
#todays qo > 500cfs than yesterday
#kinda works - line by line, but something is wrong w looping or something
Q=qo[day]
qo[day] <- qo[day-1]+500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} else{qo[day]<-qo[day]}
}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
#-------------------------------------------------------------
#   set up blank matricies
#------------------------------------------------------------
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
minFCq=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#---------------------------------------------------------------
#   determine change in storage and outflow for any day of year
#---------------------------------------------------------------
#select Qin from matrix or array? - turn into funtion
for (wy in 1){
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Qmin for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
#min discharge today given forecasted storage in the next n days
#add variables for surplus storage and associated Qmin
resS <- changeS(Qin, day, stor, maxS[day], minFCq)
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#rr=ramprate(qo, stor)
#save intial run output ----  # change for debugging - put clear matricies at beginning
FC$qo[FC$WY == yrs[wy]]<-qo[,]   #rr$qo
FC$stor[FC$WY == yrs[wy]]<-stor[,]   #rr#stor
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-minFCq[,]
}
#plot the initial results
for (wy in 1){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
for (wy in 1){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
changeS<- function(Qin, day, stor, maxS, Qmin){ #consider if these all need to be here
if (stor[day] >= maxS) {#if S > max AF, change of volume in reservoir
dS[day] <- maxS - stor[day] - (Qin[day]*f2v) #calculate ∆ volume of water in the reservoir
qo[day] <- -dS[day]*v2f
#} else if (day > 21 && minFCq[day] > minFCq [day-1]) {
#qo[day] <- qo[day-1] + 500 #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
#dS[day] <- (Qin[day]- qo[day])*f2v
#} else if (day > 21 && minFCq[day] <= minFCq[day-1]) {
# qo[day] <- qo[day-1] - 500
#dS[day] <- (Qin[day]- qo[day])*f2v
} else if (day > 1) {
qo[day] <- qo[day-1]
dS[day] <- (Qin[day]- qo[day])*f2v
} else {
qo[day] <- minQ #this is the problem *** move ramping rates here**** some fraction of the previous days discharge
dS[day] <- (Qin[day]- qo[day])*f2v
}
if (stor[day] <= minS){ #dont let storage go below the minimum
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
if (day < jul){
stor[day+1]<-stor[day] + dS[day]  #AF in the reservoir
}
outlist<-(list("stor"=stor, "dS"=dS, "qo"=qo, "day"=day))
return(outlist)
}
#determine minimum daily release before April 1
minRelease<- function(){
ix= which(prj$start <= day & prj$end >= day)
vol1 = volF*prj$b[ix] + prj$c[ix]
if (prj$start[ix] != day){
vol2 = volF*prj$b[ix+1] + prj$c[ix+1]
frac = (day - prj$start[ix])/(prj$end[ix]-prj$start[ix])
volFmar <-  frac*vol1 + (1-frac)*vol2
} else {volFmar = vol1}
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
minEvac<- FCvolAP$stor - stor[day] #minimum evaculation btw today and April 1
minReleaseVol <- minEvac+volFmar
Qmin<- (minReleaseVol*v2f)/(jul-day+1) #associated  qmin
##If statements that constrain for high flows and ramp rates
}
#determine minimum daily release after April 1
minReleaseApril<-function(){
ix30 = findInterval(day, prjAP$doy)
ix15=ix30-1
volF_target15 <- volF*prjAP$b[ix15] + prjAP$c[ix15]
volF_target30 <- volF*prjAP$b[ix30] + prjAP$c[ix30]
residual15<- volF-volF_target15
residual30<- volF- volF_target30
if (day < jul-30){
FCvol30<- resStor(residual30, day+30)
minEvac30 <- FCvol30$stor - stor[day]
minReleaseVol30 <- minEvac30 + volF_target30
q30<-(minReleaseVol30*v2f)/(jul-day+1)
} else {q30 <- minQ}
if (day < jul-15){
FCvol15<-resStor(residual15, day+15)
minEvac15 <- FCvol15$stor - stor[day]
minReleaseVol15 <- minEvac15 + volF_target15
q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin<- max(q15, q30)
}
#Ramping rate is +/- 500 cfs per day  --> distributes the water over following days
ramprate <- function(qo, stor){
for (day in 1:jul){
if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
Q=qo[day]
qo[day] <- qo[day-1]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
}else if (day >10 && qo[day] > (qo[day-1] + 500)){
#todays qo > 500cfs than yesterday
#kinda works - line by line, but something is wrong w looping or something
Q=qo[day]
qo[day] <- qo[day-1]+500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} else{qo[day]<-qo[day]}
}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
#-------------------------------------------------------------
#   set up blank matricies
#------------------------------------------------------------
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
minFCq=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#---------------------------------------------------------------
#   determine change in storage and outflow for any day of year
#---------------------------------------------------------------
#select Qin from matrix or array? - turn into funtion
for (wy in 1){
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Qmin for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
#min discharge today given forecasted storage in the next n days
#add variables for surplus storage and associated Qmin
resS <- changeS(Qin, day, stor, maxS[day], minFCq)
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#rr=ramprate(qo, stor)
#save intial run output ----  # change for debugging - put clear matricies at beginning
FC$qo[FC$WY == yrs[wy]]<-qo[,]   #rr$qo
FC$stor[FC$WY == yrs[wy]]<-stor[,]   #rr#stor
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-minFCq[,]
}
#plot the initial results
for (wy in 1){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
