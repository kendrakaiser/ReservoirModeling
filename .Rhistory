idx<-which(res$doy >= 1 & res$doy <= jul)
rows<- length(idx)
FC<- data.frame(res$doy[idx],res$WY[idx], res$totAF[idx], res$in_unreg[idx], res$qo[idx])
colnames(FC)<-c("doy", "WY", "AF", "Q", "Qo")
yrs<- 1998:2018
#calculate daily forecast values
forecast<-read.csv("Data/LP_coordinatedForecasts.csv")
volF<-vector(length = nrow(FC))
for (i in 1:nrow(FC)){
if (any(forecast$wy == FC$WY[i] & forecast$doy == FC$doy[i])){
ii=which(forecast$wy == FC$WY[i] & forecast$doy == FC$doy[i])
volF[i] <- forecast$ForecastVol[ii]
} else{volF[i] <- volF[i-1] - FC$Q[i-1]*f2v}
}
FC<-cbind(FC, volF)
#find the index of the first doy
doy1<-matrix(data=NA, ncol=1, nrow=21)
for (wy in 1:21){
doy1[wy]<- which(FC$WY == yrs[wy] & FC$doy == 1)
}
#REQUIRED storage - lookup day of year, inflow volume ####
### plate 7-1 and plate 7-3 ### ----
#Needs sum of timeseries
resStor<- function(sumQin,doy){
fvol<-round(sumQin/1000000, digits=1)
fcol<- as.numeric(fv$col[fv$fv == fvol])
stor<- as.numeric(fcVol[doy, fcol+2])
#Winter flood control space (low flow years Plate 7-2) ----
if (doy < 91 && fvol > 1.2 && fvol < 1.8){
wcol<- as.numeric(fv$wcol[fv$wfc == fvol])
stor<- as.numeric(wfc[doy,wcol])
}
if (is.na(stor) == TRUE){
stor<- as.numeric(fcVol[doy, fcol+2])
}
#required storage volume
outList<-(list("stor" = stor))
return(outList)
}
#needs whole timeseries and maxS of any given day
changeS<- function(Qin, day, stor, maxS, Qmin){ #consider if these all need to be here
if (stor[day] >= maxS) {#if S > max AF, change of volume in reservoir
dS[day] <- maxS - stor[day] - (Qin[day]*f2v) #calculate change of volume of water in the reservoir
qo[day] <- -dS[day]*v2f
} else {
qo[day] <- Qmin ##this is tricky bc then the discharge will always be high
dS[day] <- (Qin[day]- Qmin)*f2v
}
#Ramping rate is +/- 500 cfs per day
if (day > 1 && qo[day] < qo[day-1] - 500){
qo[day] <- qo[day-1] - 500
dS[day] <- (Qin[day]-qo[day])*f2v
} else if (day >1 && qo[day] > qo[day-1] + 500){
qo[day] <- qo[day-1] + 500
dS[day] <- (Qin[day]-qo[day])*f2v
} else{}
if (stor[day] <= minS){
qo[day] <- minQ
dS[day] <- minQ*f2v
}
if (day < jul){
stor[day+1]<-stor[day] + dS[day]  #AF in the reservoir
}
outlist<-(list("stor"=stor, "dS"=dS, "qo"=qo, "day"=day))
return(outlist)
}
#### set up blank matricies -----
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
QminAP=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#select Qin from matrix or array? - turn into funtion
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]]
Qin<- FC$Q[FC$WY == yrs[wy]]
#### determine reservoir storage and discharge for any given day of year
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
maxSday<- resStor(volF, day)
maxS[day] <- maxAF-maxSday$stor #max storage today given the whole years inflow
#Determine April 1 FC space and Qmin
if (any(prj$start == day)){
ix= which(any(prj$start == day))
volFmar<- volF*prj$b[ix] + prj$c[ix]
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
APmaxS<- maxAF- FCvolAP$stor #max storage on april 1
QminAP[day]<- (volF - FCvolAP$stor + volFmar)*v2f/(jul-day+1) #associated  qmin
} else {QminAP[day] <- minQ}
resS <- changeS(Qin, day, stor, maxS[day], QminAP[day])
qo[day]<-resS$qo[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-QminAP[,]
plot(maxS, type='l', ylim=c(300000, 1010200))
lines(stor, col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(qo, type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
#enter iterative loop until it works ----
spd=15 #number of days to average values over
#bumping this up this high definitely helped mediate high flows - but the storage values are all over the place
for (wy in 1:21){
counter=0
print(wy)
cy<-FC[FC$WY == yrs[wy],]
while ((any(cy$qo > qlim[1:196,2])) && counter < 200 | ((any(cy$stor > cy$maxS)) && counter < 200)) {
counter= counter+1
print(counter)
wy
ifx<- which(cy$stor <= cy$minS)
dS[ifx] <- (cy$Q[ifx]- minQ)*f2v
cy$qo[ifx]<- minQ
#trying to allow for a faster ramping rate if the storage is going to go over maxS - need to do it better tho
if (any(cy$stor > cy$maxS) && counter <2){
ind<-which(cy$stor > cy$maxS)
dS[ind]<- dS[ind] - (500*f2v)
cy$qo[ind]<- cy$qo[ind] + 500
cy$stor[ind]<-cy$stor[ind] - 500*f2v
}
if (any(cy$qo > qlim[1:196,2])){ #find all q>qMax distribute those flows over prior days and update the dS and stor
ind<-which(cy$qo > qlim[1:196,2])
id<-min(ind)
if (id > spd+1){
cy$qo[((id-spd):id)] <- sum(cy$qo[((id-spd):id)]) / (1+spd)
dS[((id-spd):id)] <- (cy$Q[((id-spd):id)] - cy$qo[((id-spd):id)]) * f2v
cy$stor[((id-spd):id)]<- cy$stor[((id-spd):id)] + dS[((id-spd):id)]
} else if (id < spd){
cy$qo[(id:(id+(spd*2)))] <- sum(cy$qo[(id:(id+(spd*2)))]) / (1+(spd*2))
dS[(id:(id+(spd*2)))] <- (cy$Q[(id:(id+(spd*2)))] - cy$qo[(id:(id+(spd*2)))]) * f2v
cy$stor[(id:(id+(spd*2)))]<- cy$stor[(id:(id+(spd*2)))] + dS[(id:(id+(spd*2)))]
}
}
}
FC$qoN[FC$WY == yrs[wy]]<- cy$qo
FC$storN[FC$WY == yrs[wy]]<- cy$stor
}
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$storN[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qoN[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
wy
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]]
Qin<- FC$Q[FC$WY == yrs[wy]]
#### determine reservoir storage and discharge for any given day of year
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
maxSday<- resStor(volF, day)
maxS[day] <- maxAF-maxSday$stor #max storage today given the whole years inflow
#Determine April 1 FC space and Qmin
if (any(prj$start == day)){
ix= which(any(prj$start == day))
volFmar<- volF*prj$b[ix] + prj$c[ix]
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
APmaxS<- maxAF- FCvolAP$stor #max storage on april 1
QminAP[day]<- (volF - FCvolAP$stor + volFmar)*v2f/(jul-day+1) #associated  qmin
} else {QminAP[day] <- minQ}
resS <- changeS(Qin, day, stor, maxS[day], QminAP[day])
qo[day]<-resS$qo[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-QminAP[,]
}
as.numeric(fcVol[doy, fcol+2])
FC$volF[FC$WY == yrs[wy] & FC$doy == day]
View(maxS)
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]]
Qin<- FC$Q[FC$WY == yrs[wy]]
#### determine reservoir storage and discharge for any given day of year
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
if (volF >0){
maxSday<- resStor(volF, day)
} else maxSday <- maxAF
maxS[day] <- maxAF-maxSday$stor #max storage today given the whole years inflow
#Determine April 1 FC space and Qmin
if (any(prj$start == day)){
ix= which(any(prj$start == day))
volFmar<- volF*prj$b[ix] + prj$c[ix]
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
APmaxS<- maxAF- FCvolAP$stor #max storage on april 1
QminAP[day]<- (volF - FCvolAP$stor + volFmar)*v2f/(jul-day+1) #associated  qmin
} else {QminAP[day] <- minQ}
resS <- changeS(Qin, day, stor, maxS[day], QminAP[day])
qo[day]<-resS$qo[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-QminAP[,]
}
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
if (volF >0){
maxSday<- resStor(volF, day)
} else maxSday$stor <- maxAF
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
if (volF >0){
maxSday<- resStor(volF, day)
} else {maxSday$stor <- maxAF}
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]]
Qin<- FC$Q[FC$WY == yrs[wy]]
#### determine reservoir storage and discharge for any given day of year
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
if (volF >0){
maxSday<- resStor(volF, day)
} else {maxSday$stor <- maxAF}
maxS[day] <- maxAF-maxSday$stor #max storage today given the whole years inflow
#Determine April 1 FC space and Qmin
if (any(prj$start == day)){
ix= which(any(prj$start == day))
volFmar<- volF*prj$b[ix] + prj$c[ix]
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
APmaxS<- maxAF- FCvolAP$stor #max storage on april 1
QminAP[day]<- (volF - FCvolAP$stor + volFmar)*v2f/(jul-day+1) #associated  qmin
} else {QminAP[day] <- minQ}
resS <- changeS(Qin, day, stor, maxS[day], QminAP[day])
qo[day]<-resS$qo[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-QminAP[,]
}
yrs[8]
volF[volF < 0] <- 0
FC<-cbind(FC, volF)
View(FC)
View(FC)
FC$volF[FC$volF < 0] <- 0
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
QminAP=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#select Qin from matrix or array? - turn into funtion
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]]
Qin<- FC$Q[FC$WY == yrs[wy]]
#### determine reservoir storage and discharge for any given day of year
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
if (volF > 0){
maxSday<- resStor(volF, day)
} else {maxSday$stor <- maxAF}
maxS[day] <- maxAF-maxSday$stor #max storage today given the whole years inflow
#Determine April 1 FC space and Qmin
if (any(prj$start == day)){
ix= which(any(prj$start == day))
volFmar<- volF*prj$b[ix] + prj$c[ix]
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
APmaxS<- maxAF- FCvolAP$stor #max storage on april 1
QminAP[day]<- (volF - FCvolAP$stor + volFmar)*v2f/(jul-day+1) #associated  qmin
} else {QminAP[day] <- minQ}
resS <- changeS(Qin, day, stor, maxS[day], QminAP[day])
qo[day]<-resS$qo[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-QminAP[,]
}
#enter iterative loop until it works ----
spd=7 #number of days to average values over
#bumping this up this high definitely helped mediate high flows - but the storage values are all over the place
for (wy in 1:21){
counter=0
print(wy)
cy<-FC[FC$WY == yrs[wy],]
while ((any(cy$qo > qlim[1:196,2])) && counter < 200 | ((any(cy$stor > cy$maxS)) && counter < 200)) {
counter= counter+1
print(counter)
wy
ifx<- which(cy$stor <= cy$minS)
dS[ifx] <- (cy$Q[ifx]- minQ)*f2v
cy$qo[ifx]<- minQ
#trying to allow for a faster ramping rate if the storage is going to go over maxS - need to do it better tho
if (any(cy$stor > cy$maxS) && counter <2){
ind<-which(cy$stor > cy$maxS)
dS[ind]<- dS[ind] - (500*f2v)
cy$qo[ind]<- cy$qo[ind] + 500
cy$stor[ind]<-cy$stor[ind] - 500*f2v
}
if (any(cy$qo > qlim[1:196,2])){ #find all q>qMax distribute those flows over prior days and update the dS and stor
ind<-which(cy$qo > qlim[1:196,2])
id<-min(ind)
if (id > spd+1){
cy$qo[((id-spd):id)] <- sum(cy$qo[((id-spd):id)]) / (1+spd)
dS[((id-spd):id)] <- (cy$Q[((id-spd):id)] - cy$qo[((id-spd):id)]) * f2v
cy$stor[((id-spd):id)]<- cy$stor[((id-spd):id)] + dS[((id-spd):id)]
} else if (id < spd){
cy$qo[(id:(id+(spd*2)))] <- sum(cy$qo[(id:(id+(spd*2)))]) / (1+(spd*2))
dS[(id:(id+(spd*2)))] <- (cy$Q[(id:(id+(spd*2)))] - cy$qo[(id:(id+(spd*2)))]) * f2v
cy$stor[(id:(id+(spd*2)))]<- cy$stor[(id:(id+(spd*2)))] + dS[(id:(id+(spd*2)))]
}
}
}
FC$qoN[FC$WY == yrs[wy]]<- cy$qo
FC$storN[FC$WY == yrs[wy]]<- cy$stor
}
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$storN[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qoN[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]]
Qin<- FC$Q[FC$WY == yrs[wy]]
#### determine reservoir storage and discharge for any given day of year
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day]
if (volF >= 0){
maxSday<- resStor(volF, day)
} else {maxSday$stor <- maxAF}
maxS[day] <- maxAF-maxSday$stor #max storage today given the whole years inflow
#Determine April 1 FC space and Qmin
if (any(prj$start == day)){
ix= which(any(prj$start == day))
volFmar<- volF*prj$b[ix] + prj$c[ix]
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
APmaxS<- maxAF- FCvolAP$stor #max storage on april 1
QminAP[day]<- (volF - FCvolAP$stor + volFmar)*v2f/(jul-day+1) #associated  qmin
} else {QminAP[day] <- minQ}
resS <- changeS(Qin, day, stor, maxS[day], QminAP[day])
qo[day]<-resS$qo[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-QminAP[,]
}
plot(maxS, type='l', ylim=c(300000, 1010200))
lines(stor, col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(qo, type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
#enter iterative loop until it works ----
spd=7 #number of days to average values over
#bumping this up this high definitely helped mediate high flows - but the storage values are all over the place
for (wy in 1:21){
counter=0
print(wy)
cy<-FC[FC$WY == yrs[wy],]
while ((any(cy$qo > qlim[1:196,2])) && counter < 200 | ((any(cy$stor > cy$maxS)) && counter < 200)) {
counter= counter+1
print(counter)
wy
ifx<- which(cy$stor <= cy$minS)
dS[ifx] <- (cy$Q[ifx]- minQ)*f2v
cy$qo[ifx]<- minQ
#trying to allow for a faster ramping rate if the storage is going to go over maxS - need to do it better tho
if (any(cy$stor > cy$maxS) && counter <2){
ind<-which(cy$stor > cy$maxS)
dS[ind]<- dS[ind] - (500*f2v)
cy$qo[ind]<- cy$qo[ind] + 500
cy$stor[ind]<-cy$stor[ind] - 500*f2v
}
if (any(cy$qo > qlim[1:196,2])){ #find all q>qMax distribute those flows over prior days and update the dS and stor
ind<-which(cy$qo > qlim[1:196,2])
id<-min(ind)
if (id > spd+1){
cy$qo[((id-spd):id)] <- sum(cy$qo[((id-spd):id)]) / (1+spd)
dS[((id-spd):id)] <- (cy$Q[((id-spd):id)] - cy$qo[((id-spd):id)]) * f2v
cy$stor[((id-spd):id)]<- cy$stor[((id-spd):id)] + dS[((id-spd):id)]
} else if (id < spd){
cy$qo[(id:(id+(spd*2)))] <- sum(cy$qo[(id:(id+(spd*2)))]) / (1+(spd*2))
dS[(id:(id+(spd*2)))] <- (cy$Q[(id:(id+(spd*2)))] - cy$qo[(id:(id+(spd*2)))]) * f2v
cy$stor[(id:(id+(spd*2)))]<- cy$stor[(id:(id+(spd*2)))] + dS[(id:(id+(spd*2)))]
}
}
}
FC$qoN[FC$WY == yrs[wy]]<- cy$qo
FC$storN[FC$WY == yrs[wy]]<- cy$stor
}
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$storN[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qoN[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
library(ggplot2)
library(reshape2)
library(gridExtra)
library(gtable)
library(grid)
fill<- rep(c("Modeled", "Observed", "Max"), each=196)
datelab<-seq(as.Date("1997-01-01"), as.Date("1997-07-15"), by="1 day")
x<- datelab
x2<- rep(datelab, times=4)
qs<-rep(c("Inflow", "Limit","Modeled Q", "Observed Q"), each=196)
gnames<- c("g98", "g99", "g00", 'g01', "g02", "g03", "g04","g05", 'g06', "g07", "g08", "g09", "g10", "g11", "g12", "g13", "g14", "g15", "g16", "g17")
plotfn<- function(wy){
vol<-(c(FC$storN[FC$WY == yrs[wy]],FC$AF[FC$WY == yrs[wy]],FC$maxS[FC$WY == yrs[wy]]))/10000
df <- data.frame(fill,x,vol)
q<- c(FC$Q[FC$WY == yrs[wy]], qlim[1:196,2],FC$qoN[FC$WY == yrs[wy]], FC$Qo[FC$WY == yrs[wy]])/1000
dfQ<-data.frame(q, x2, qs)
ps<-ggplot(df, aes(x=x, y=vol, fill=fill)) +
geom_hline(yintercept=maxAF/10000,linetype="dashed")+
geom_area(position = "identity")+
scale_fill_manual(values = alpha(c("#7fcdbb", "#ce1256", "#15D1FF"), c(0.65,1,0.70)))+ #green red blue "#7fcdbb", "#ce1256", "#2c7fb8" #abdda4
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand=c(0,0))+
xlab(NULL)+
theme_classic()+
theme(axis.text.x = element_blank())+
theme(legend.position="none")+
ylab("Storage (10,000 ac-ft)")+
coord_cartesian(ylim=c(minS/10000,maxAF/10000))
pq<-ggplot(dfQ, aes(x=x2, y=q, colour=qs, group= qs, linetype = qs))+
geom_line() +
scale_color_manual(values=c("#1018A4","#969696","#ce1256", "#15B9FF"))+
scale_linetype_manual(values=c("solid","dashed","solid","solid")) +
scale_x_date(date_breaks = "1 month", date_labels =  "%b", expand=c(0,0))+
theme_classic()+
theme(legend.position="none") +
scale_y_continuous(breaks=seq(0,12,2))+
ylab("Discharge (1,000 cfs)")+
xlab("Date")
gs<-ggplotGrob(ps)
gq<-ggplotGrob(pq)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gq, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gq$widths)
grid.newpage()
grid.draw(gg)
}
#plotfn(20)
for (wy in 1:20){
plotfn(wy)
}
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, nrow=1)
grid.arrange(g11, g12, g13, g14, g15, g16, g17, g18, g19, g20, nrow=1)
for (wy in 19){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$storN[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
}
wy=20
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$storN[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(150000, 1010200))
lines(FC$storN[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
plot(FC$qoN[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1')
4005/500
round(8.05)
a<- c(3,4,5,6,7,8)
a[3:5]
a[3:5] +5
plot(FC$Qmin[FC$WY == 2007])
plot(FC$Qmin[FC$WY == 2008])
plot(FC$Qmin[FC$WY == 2010])
plot(FC$Qmin[FC$WY == 2017])
