#Winter flood control space (low flow years Plate 7-2) ----
if (doy < 91 && fvol > 1.2 && fvol < 1.8){
wcol<- as.numeric(fv$wcol[fv$wfc == fvol])
fcs<- as.numeric(wfc[doy,wcol])
}
if (is.na(fcs) == TRUE){
fcs<- as.numeric(fcVol[doy, fcol+2])
}
#required flood control space (storage volume)
return(fcs)
}
#predict max storage in the next m days
predMaxS<- function(m){
for (day in 1:jul){
volF <- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
count=0
if (volF >= 0 && day < (jul-m)){
for (it in day:(day+m-1)){
count=count+1
vF = volF - (volF/(jul-day))*(day-it) #predict maxS given equal distribution of inflow
reqS <- reqStor(vF, it)
maxS[day, count] <- (maxAF-reqS) #max storage today given the whole years inflow
}
} else {storD <- 0}
maxS[is.na(maxS)]<- maxAF
}
return(maxS)
}
#determine minimum daily release before April 1
minRelease<- function(day, volF){
ix= which(prj$start <= day & prj$end >= day)
vol1 = volF*prj$b[ix] + prj$c[ix]
if (prj$start[ix] != day){
vol2 = volF*prj$b[ix+1] + prj$c[ix+1]
frac = (day - prj$start[ix])/(prj$end[ix]-prj$start[ix])
volFmar <-  frac*vol1 + (1-frac)*vol2
} else {volFmar = vol1}
volFresid <- volF - volFmar
FCvolAP<- reqStor(volFresid, 91) #flood control space required on april 1
minEvac<- FCvolAP - availStor[day] #minimum evaculation btw today and April 1
minReleaseVol <- minEvac+volFmar
Qmin <- (minReleaseVol*v2f)/(jul-day+1) #associated  qmin
##If statements that constrain for high flows and ramp rates?
}
#determine minimum daily release after April 1
minReleaseApril<-function(day, volF){
ix30 = findInterval(day, prjAP$doy)
ix15=ix30-1
volF_target15 <- volF*prjAP$b[ix15] + prjAP$c[ix15]
volF_target30 <- volF*prjAP$b[ix30] + prjAP$c[ix30]
residual15<- volF-volF_target15
residual30<- volF- volF_target30
if (day < jul-30){
FCvol30<- reqStor(residual30, day+30) #required storage space
minEvac30 <- FCvol30 - availStor[day]
minReleaseVol30 <- minEvac30 + volF_target30
q30<-(minReleaseVol30*v2f)/(jul-day+1)
} else {q30 <- minQ}
if (day < jul-15){
FCvol15<-reqStor(residual15, day+15)
minEvac15 <- FCvol15 - availStor[day]
minReleaseVol15 <- minEvac15 + volF_target15
q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin <- max(q15, q30)
}
#forecast what the storage would be in s days given previous âˆ† in S and make those changes over m days
forecastS<-function(s,m,day){
if (day > s+1){
dsdt= (stor[day] - stor[day-s])/s
storF[day] <<- (dsdt*m)+stor[day]
} else {storF[day]<<- stor[day]}
}
#evaluate change in storage in regard to the forecasted storage to prevent going over maxS
#update discharge, change in storage and day+1 storage
evalS<- function(Qin, day, stor, maxS, Qmin,s,m){
if (storF[day] >= maxS[day,m] && day > s+1){ #&& day <188
dsdtMax= (storF[day] - maxS[day,m])/s
qo[day] <- Qmin[day] + (dsdtMax*v2f)
flag = 'TRUE' #true we need to increase ramp rates to get rid of the water
} else {qo[day] <- Qmin[day]
flag='FALSE'}
if (stor[day] > maxAF){
addQ = (stor[day] - maxAF)*v2f
minFCq[day] <- minFCq[day] + addQ
flag= 'TRUE'
} else {flag='FALSE'}
#if the calculated discharge is greater than +/- 500 set it to +/- 500
if (flag == 'TRUE'){ #going over maxS or maxAF
ramp= 1000
} else {ramp = 500}
if (qo[day] > (qo[day-1] + ramp) && day > 2 ){
qo[day] <- qo[day-1] + ramp
} else if (qo[day] < (qo[day-1]-500) && day > 2 ){
qo[day] <- qo[day-1]-500}
###UPDATE here
#this puts a hard constraints on not topping the dam - but doesnt work 21 times
if (availStor[day] <= (1000*v2f)){
qo[day] <- qo[day] + 1000
availStor[day] <- availStor[day] + 1000*f2v
stor[day] <- stor[day] - (1000*f2v)
}
dS[day] <- (Qin[day]- qo[day])*f2v
#dont let storage go below the minimum
if (stor[day] <= minS){
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
#update storage for the next day
if (day < jul){
stor[day+1]<<-stor[day] + dS[day]  #AF in the reservoir
}
#write out values
qo[day]<<-qo[day]
dS[day]<<-dS[day]
}
#determine change in storage and outflow for a given water year and forecast window
outflowStor<-function(s,m){
results<-list()
discharge<-matrix(data=NA, nrow = jul, ncol=21)
for (wy in 1:21){
#   set up blank matricies
#------------------------------------------
stor<<-matrix(data=NA, nrow = jul, ncol = 1)
maxS<<-matrix(data=NA, nrow = jul, ncol = m)
availStor<<-matrix(data=NA, nrow = jul, ncol = 1)
minFCq<<-matrix(data=NA, nrow = jul, ncol = 1)
storF<<-matrix(data=NA, nrow = jul, ncol = 1)
qo<<-matrix(data=NA, nrow = jul, ncol = 1) #modeled outflow from reservoir
dS<<-matrix(data=NA, nrow = jul, ncol = 1)
#---------
# initalize
#-----
stor[1] <<- FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
maxS <<- predMaxS(m) #vector of 198 days of max storage out to M days
#----- run all the functions to get to discharge and updated storage
for (day in 1:jul){
volF<<- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
availStor[day] <<- maxAF-stor[day]
# Min flood control release for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<<-minRelease(day, volF)
} else {
minFCq[day]<<-minReleaseApril(day, volF)
}
#minimum discharge is 240
if (minFCq[day] < minQ){
minFCq[day] <<- minQ
}
forecastS(s,m,day)
evalS(Qin, day, stor, maxS, minFCq, s, m)
}
out<<- cbind(maxS[,1], storF, stor, minFCq, qo) #availStor dS,
colnames(out)<-c('maxS','storF', 'stor', 'minQ', 'qo')
results[[wy]]<-out
#discharge[,wy]<-qo
}
#Q<-c(discharge)
return(results)
}
m=10
s=5
results<- outflowStor(s,m)
library(pse)
#define probability function - discrete uniform density function for integer parameters
qdunif<-function(p, min, max){
floor(qunif(p, min, max))}
#wrap model
modelRun<-function(params){
return(mapply(outflowStor, params[,1], params[,2]))
}
#set parameters
q.arg<- list(list("min"=1, "max"=10), list("min"=1, "max"=15))
names(q.arg)<-c("s", "m")
factors<-c("s", "m")
#myLHS<-LHS(model=modelRun, factors, N=100, q='qdunif', q.arg, nboot=4)
#create hypercube
bothLHS <-LHS(model = NULL, factors, N=10, q='qdunif', q.arg, nboot=1)
bothLHS$data
outB<-modelRun(bothLHS$data)
View(outB)
plot(outB[[11]][,5], type='l')
for (i in 12:20){
lines(outB[[i]][,5])
}
plot(outB[[1]][,5], type='l')
for (i in 2:210){
lines(outB[[i]][,5])
}
plot(outB[[21]][,5], type='l')
for (i in 22:29){
lines(outB[[i]][,5])
}
plot(outB[[31]][,5], type='l')
for (i in 32:39){
lines(outB[[i]][,5])
}
bothLHS <-LHS(model = NULL, factors, N=50, q='qdunif', q.arg, nboot=1)
outB<-modelRun(bothLHS$data)
bothLHS$data
plot(outB[[1]][,5], type='l')
for (i in 2:50){
lines(outB[[i]][,5])
}
class(outB[[1]])
x<- c(outB[[1]], outB[[2]])
x<- cbind(outB[[1]], outB[[2]])
View(x)
x<- cbind(outB[[1]][,5], outB[[2]][,5])
View(x)
x<- cbind(outB[[1]][,5]:outB[[2]][,5])
x<- cbind(outB[[1:4][,5])
x<- cbind(outB[1:4][,5])
x<- cbind(outB[c(1,4)][,5])
x<- cbind(outB[[c(1,4)]])
View(x)
x<- cbind(outB[[c(1,4)]][,5])
View(x)
x<- cbind(outB[c(1,4)])
View(x)
x<- cbind(outB[c(1,6)])
View(x)
n=50
1=
i=1
#--------------------------------
# Re-organize output for analysis
#--------------------------------
wy_results<-list()
wy_results[[i]][n]<- outB[[n]][,5]
n=1
wy_results[[i]][n]<- outB[[n]][,5]
wy_results[[1]][1]<- outB[[1]][,5]
outB[[1]][,5]
wy_results[[1]][,1]<- outB[[1]][,5]
tst<-outB[[1]][,5]
wy_results[[i]]<- outB[[n]][,5]
View(wy_results)
t<-lapply(1:10, matrix, data= NA, nrow=191, ncol=n)
View(t)
t<-lapply(1:10, matrix, data= NA, nrow=191, ncol=50)
View(t)
n=50
t<-lapply(1:10, matrix, data= NA, nrow=191, ncol=5)
t<-lapply(1:10, matrix, data= NA, nrow=191, ncol=n)
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][n]<- outB[[n]][,5]
}
}
warnings()
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][,n]<- outB[[n]][,5]
}
}
View(wy_Q)
wy_Q[[1]]
View(outB)
dim(outB)
length(outB)
str(outB)
View(bothLHS)
a<-list(c(2,3,4), c(4,4,4))
View(a)
str(attributes(outB[[1]]))
str(attributes(outB))
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
for (i in 1:21){
for (j in 1:n){
for(k in 1:(21*n)){
wy_Q[[i]][,j]<- outB[[k]][,5]
}
}
}
wy_Q[[1]]
View(wy_Q)
matplot(wy_Q[[1]])
21*n
matplot(wy_Q[[1]], type='l')
matplot(wy_Q[[2]], type='l')
matplot(wy_Q[[3]], type='l')
q.argS<- list(list("min"=1, "max"=10), list("min"=6, "max"=8))
sLHS<-LHS(model = NULL, factors, N=5, q='qdunif', q.argS, nboot=1)
out_S<-modelRun(sLHS$data)
dim(out_S)
out_S[1]
a<-out_S[1]
View(a)
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
count=0
for (i in 1:21){
for (j in 1:n){
count=count+1
wy_Q[[i]][,j]<- outB[[count]][,5]
}
}
View(wy_Q)
a<-wy_Q[[1]]
View(a)
bothLHS$data
a<-outflowStor(5,3)
b<-outflowStor(5,14)
View(a)
a[[1]][,5]
a<-a[[1]][,5]
b<-b[[1]][,5]
plot(a,b)
c<-outB[[1]][,5]
d<-outB[[2]][,5]
plot(c,d)
outflowStor<-function(s,m){
results<-list()
discharge<-matrix(data=NA, nrow = jul, ncol=21)
for (wy in 1:2){
#   set up blank matricies
#------------------------------------------
stor<<-matrix(data=NA, nrow = jul, ncol = 1)
maxS<<-matrix(data=NA, nrow = jul, ncol = m)
availStor<<-matrix(data=NA, nrow = jul, ncol = 1)
minFCq<<-matrix(data=NA, nrow = jul, ncol = 1)
storF<<-matrix(data=NA, nrow = jul, ncol = 1)
qo<<-matrix(data=NA, nrow = jul, ncol = 1) #modeled outflow from reservoir
dS<<-matrix(data=NA, nrow = jul, ncol = 1)
#---------
# initalize
#-----
stor[1] <<- FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
maxS <<- predMaxS(m) #vector of 198 days of max storage out to M days
#----- run all the functions to get to discharge and updated storage
for (day in 1:jul){
volF<<- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
availStor[day] <<- maxAF-stor[day]
# Min flood control release for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<<-minRelease(day, volF)
} else {
minFCq[day]<<-minReleaseApril(day, volF)
}
#minimum discharge is 240
if (minFCq[day] < minQ){
minFCq[day] <<- minQ
}
forecastS(s,m,day)
evalS(Qin, day, stor, maxS, minFCq, s, m)
}
out<<- cbind(maxS[,1], storF, stor, minFCq, qo) #availStor dS,
colnames(out)<-c('maxS','storF', 'stor', 'minQ', 'qo')
results[[wy]]<-out
#discharge[,wy]<-qo
}
#Q<-c(discharge)
return(results)
}
n=5
#create hypercube
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
outB<-modelRun(bothLHS$data)
View(outB)
c<-outB[[1]][,5]
d<-outB[[2]][,5]
plot(c,d)
d<-outB[[6]][,5]
plot(c,d)
d<-outB[[3]][,5]
plot(c,d)
d<-outB[[4]][,5]
plot(c,d)
wy_Q<-lapply(1:2, matrix, data= NA, nrow=196, ncol=n)
count=0
for (i in 1:21){
for (j in 1:n){
count=count+1
wy_Q[[i]][,j]<- outB[[count]][,5]
}
}
View(wy_Q)
matplot(wy_Q[[1]], type='l')
outflowStor<-function(s,m){
results<-list()
discharge<-matrix(data=NA, nrow = jul, ncol=21)
for (wy in 1:21){
#   set up blank matricies
#------------------------------------------
stor<<-matrix(data=NA, nrow = jul, ncol = 1)
maxS<<-matrix(data=NA, nrow = jul, ncol = m)
availStor<<-matrix(data=NA, nrow = jul, ncol = 1)
minFCq<<-matrix(data=NA, nrow = jul, ncol = 1)
storF<<-matrix(data=NA, nrow = jul, ncol = 1)
qo<<-matrix(data=NA, nrow = jul, ncol = 1) #modeled outflow from reservoir
dS<<-matrix(data=NA, nrow = jul, ncol = 1)
#---------
# initalize
#-----
stor[1] <<- FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
maxS <<- predMaxS(m) #vector of 198 days of max storage out to M days
#----- run all the functions to get to discharge and updated storage
for (day in 1:jul){
volF<<- FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
availStor[day] <<- maxAF-stor[day]
# Min flood control release for storage goals on April 1 and every 15 days after
if (day < 91){
minFCq[day]<<-minRelease(day, volF)
} else {
minFCq[day]<<-minReleaseApril(day, volF)
}
#minimum discharge is 240
if (minFCq[day] < minQ){
minFCq[day] <<- minQ
}
forecastS(s,m,day)
evalS(Qin, day, stor, maxS, minFCq, s, m)
}
out<<- cbind(maxS[,1], storF, stor, minFCq, qo) #availStor dS,
colnames(out)<-c('maxS','storF', 'stor', 'minQ', 'qo')
results[[wy]]<-out
#discharge[,wy]<-qo
}
#Q<-c(discharge)
return(results)
}
n=100
#create hypercube
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
#bothLHS<-tell(bothLHS, bothLHS$data) #res<-get.results(bothLHS)
outB<-modelRun(bothLHS$data)
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
count=0
for (i in 1:21){
for (j in 1:n){
count=count+1
wy_Q[[i]][,j]<- outB[[count]][,5]
}
}
matplot(wy_Q[[1]], type='l')
i=1
a<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
View(a)
z<-matrix(data=NA, nrow = 196, ncol = 42)
z[i:i+1]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
z[i:(i+1),]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
sd_doy[i]<- apply(wy_Q[[i]], 1, sd)
View(sd_doy)
wy_Q[[i]]
a<-wy_Q[[i]]
View(a)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
sd_doy[i]<- apply(wy_Q[[i]], 1, sd)
a<-apply(wy_Q[[i]], 1, sd)
plot(a)
z[i:(i+1),]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
OutMeans<-matrix(data=NA, nrow = 196, ncol = 21)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
for (i in 1:21){
OutMeans[,i]<-rowMeans(wy_Q[[i]], na.rm = FALSE, dims = 1)
z[i]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[i]<- apply(wy_Q[[i]], 1, sd)
}
warnings()
for (i in 1:21){
OutMeans[,i]<-rowMeans(wy_Q[[i]], na.rm = FALSE, dims = 1)
z[i]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[i,]<- apply(wy_Q[[i]], 1, sd)
}
View(z)
z[[1]]
z[[i]]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
OutMeans<-matrix(data=NA, nrow = 196, ncol = 21)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
for (i in 1:21){
OutMeans[,i]<-rowMeans(wy_Q[[i]], na.rm = FALSE, dims = 1)
z[[i]]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[i,]<- apply(wy_Q[[i]], 1, sd)
}
apply(wy_Q[[i]], 1, sd)
a<apply(wy_Q[[i]], 1, sd)
a<-apply(wy_Q[[i]], 1, sd)
for (i in 1:21){
OutMeans[,i]<-rowMeans(wy_Q[[i]], na.rm = FALSE, dims = 1)
z[[i]]<-apply(wy_Q[[i]], 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[,i]<- apply(wy_Q[[i]], 1, sd)
}
View(OutMeans)
matplot(OutMeans, type='l')
plot(OutMeans[1], type='l')
plot(OutMeans[,1], type='l')
plot(OutMeans[,2], type='l')
plot(OutMeans[,3], type='l')
matplot(wy_Q[[1]], type='l')
matplot(wy_Q[[10]], type='l')
matplot(wy_Q[[16]], type='l')
matplot(wy_Q[[1]], type='l')
matplot(wy_Q[[2]], type='l')
matplot(wy_Q[[3]], type='l')
matplot(wy_Q[[4]], type='l')
matplot(wy_Q[[5]], type='l')
matplot(wy_Q[[6]], type='l')
matplot(wy_Q[[7]], type='l')
matplot(OutMeans, type='l')
matplot(wy_Q[[3]], type='l')
matplot(wy_Q[[2]], type='l')
matplot(wy_Q[[20]], type='l')
matplot(wy_Q[[19]], type='l')
