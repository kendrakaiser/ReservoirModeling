ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE)
lines(dataOut$maxStor[,wy], type='l') #max storage
matplot(dataOut$maxStor[[wy]], type='l', col = colRamp)+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE)
matplot(dataOut$stor[[wy]], type='l', col = colRamp)+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE)
lines(dataOut$maxStor[,wy], type='l') #max storage
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp)+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
both<-cleanData(outB)
sOut<-cleanData(out_S)
par(mfrow=c(2,2)) #**
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
hml<-c(3,4,20,21)
for (wy in hml){
par(mfrow=c(2,2))
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
}
for (wy in hml){
par(mfrow=c(3,2))
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
for (wy in hml){
par(mfrow=c(2,3))
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
View(both)
View(mLHS)
View(outB)
tst<-outB[[1]]
View(tst)
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(300000, 1010200))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfrow=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
par(mfrow=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(300000, 1010400))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(300000, 1011000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(300000, 1012000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(300000, 1020000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(350000, 1060000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
QSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<- matplot(dataOut$Q[[wy]], type='l', col = colRamp, ylim=c(0,22000)) +
lines(qlim[,2], type='l', lty=3, col='grey17')
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
QSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<- matplot(dataOut$Q[[wy]], type='l', col = colRamp) +
lines(qlim[,2], type='l', lty=3, col='grey17')
return(plt) ### color coded to m/s values
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(380000, 1080000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
QSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<- matplot(dataOut$Q[[wy]], type='l', col = colRamp) +
lines(qlim[,2], type='l', lty=3, col='grey17')
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(390000, 1100000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
par(mfcol=c(2,4))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
hml<-c(2,3,4,20,21)
par(mfcol=c(2,5))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
Qstats<-function(dataOut){
OutMeans<-matrix(data=NA, nrow = 196, ncol = 21)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
for (i in 1:21){
wy_Q<-dataOut$Q[[i]]
OutMeans[,i]<-rowMeans(wy_Q, na.rm = FALSE, dims = 1)
z[[i]]<-apply(wy_Q, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[,i]<- apply(wy_Q, 1, sd)
cv_doy[,i]<- apply(wy_Q, 1, cv)
}
out<-list(OutMeans, z, sd_doy, cv_doy)
names(out)<-c('mean', 'ci', 'sd', 'cv')
return(out)
}
storstats<-function(dataOut){
OutMeans<-matrix(data=NA, nrow = 196, ncol = 21)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
for (i in 1:21){
wy_S<-dataOut$stor[[i]]
OutMeans[,i]<-rowMeans(wy_S, na.rm = FALSE, dims = 1)
z[[i]]<-apply(wy_S, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[,i]<- apply(wy_S, 1, sd)
cv_doy[,i]<- apply(wy_S, 1, cv)
}
out<-list(OutMeans, z, sd_doy, cv_doy)
names(out)<-c('mean', 'ci', 'sd', 'cv')
return(out)
}
bothQstats<-Qstats(both)
sQstats<-Qstats(sOut)
mQstats<-Qstats(mOut)
bothSstats<-storstats(both)
sSstats<-storstats(sOut)
mSstats<-storstats(mOut)
Qstats<-function(dataOut){
OutMeans<-matrix(data=NA, nrow = 196, ncol = 21)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
cv_doy<-matrix(data=NA, nrow = 196, ncol = 21)
for (i in 1:21){
wy_Q<-dataOut$Q[[i]]
OutMeans[,i]<-rowMeans(wy_Q, na.rm = FALSE, dims = 1)
z[[i]]<-apply(wy_Q, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[,i]<- apply(wy_Q, 1, sd)
cv_doy[,i]<- apply(wy_Q, 1, cv)
}
out<-list(OutMeans, z, sd_doy, cv_doy)
names(out)<-c('mean', 'ci', 'sd', 'cv')
return(out)
}
storstats<-function(dataOut){
OutMeans<-matrix(data=NA, nrow = 196, ncol = 21)
z<-lapply(1:21, matrix, data=NA, nrow = 196, ncol =2)
sd_doy<-matrix(data=NA, nrow = 196, ncol = 21)
cv_doy<-matrix(data=NA, nrow = 196, ncol = 21)
for (i in 1:21){
wy_S<-dataOut$stor[[i]]
OutMeans[,i]<-rowMeans(wy_S, na.rm = FALSE, dims = 1)
z[[i]]<-apply(wy_S, 1, quantile, probs = c(0.05, 0.95),  na.rm = TRUE)
sd_doy[,i]<- apply(wy_S, 1, sd)
cv_doy[,i]<- apply(wy_S, 1, cv)
}
out<-list(OutMeans, z, sd_doy, cv_doy)
names(out)<-c('mean', 'ci', 'sd', 'cv')
return(out)
}
bothQstats<-Qstats(both)
sQstats<-Qstats(sOut)
mQstats<-Qstats(mOut)
bothSstats<-storstats(both)
sSstats<-storstats(sOut)
mSstats<-storstats(mOut)
par(mfrow=c(3,1))
matplot(bothQstats$sd, type='l')
matplot(mQstats$sd, type='l')
matplot(sQstats$sd, type='l')
par(mfrow=c(3,1))
matplot(bothQstats$cv, type='l')
matplot(mQstats$cv, type='l')
matplot(sQstats$cv, type='l')
high=c(1,2,9,14,15,21)
low=c(4,5,6,7,8,10,11,13,16,17,18,19)
av=c(3,12,20)
par(mfrow=c(3,1))
matplot(bothQstats$cv[,high], type='l')
matplot(mQstats$cv[,high], type='l')
matplot(sQstats$cv[,high], type='l')
par(mfcol=c(3,3))
matplot(bothQstats$cv[,high], type='l')
matplot(mQstats$cv[,high], type='l')
matplot(sQstats$cv[,high], type='l')
matplot(bothQstats$cv[,av], type='l')
matplot(mQstats$cv[,av], type='l')
matplot(sQstats$cv[,av], type='l')
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
low=c(4,5,6,7,8,10)#11,13,16,17,18,19
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
low=c(4,5,6,7,8)#,10,11,13,16,17,18,19
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
low=c(4,5)#,6,7,8)#,10,11,13,16,17,18,19
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
low=c(4,6)#5,7,8)#,10,11,13,16,17,18,19
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
low=c(4,7)#5,6,8)#,10,11,13,16,17,18,19
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
low=c(4,8)#5,6,7,10,11,13,16,17,18,19
matplot(bothQstats$cv[,low], type='l')
matplot(mQstats$cv[,low], type='l')
matplot(sQstats$cv[,low], type='l')
lowish=c(5,6,7,10,11,13,16,17,18,19)
matplot(bothQstats$cv[,lowish], type='l')
matplot(mQstats$cv[,lowish], type='l')
matplot(sQstats$cv[,lowish], type='l')
View(FC)
Qsum<-matrix(data=NULL, row=21, col=1)
for (wy in 1:21){
Qsum<-cumsum(FC$Q[FC$WY == yrs[wy]])
}
Qsum<-matrix(data=NA, nrow=21, ncol=1)
for (wy in 1:21){
Qsum<-cumsum(FC$Q[FC$WY == yrs[wy]])
}
barplot(Qsum)
plot(Qsum)
wy=1
Qsum<-cumsum(FC$Q[FC$WY == yrs[wy]])
Qsum<-matrix(data=NA, nrow=21, ncol=1)
for (wy in 1:21){
csum<-cumsum(FC$Q[FC$WY == yrs[wy]])
Qsum<-csum[196]
}
Qsum<-matrix(data=NA, nrow=21, ncol=1)
for (wy in 1:21){
csum<-cumsum(FC$Q[FC$WY == yrs[wy]])
Qsum[wy]<-csum[196]
}
barplot(Qsum)
plot(Qsum)
par(mfcol=c(3,3))
matplot(bothQstats$cv[,high], type='l', col = colRamp)
par(mfcol=c(4,1))
matplot(bothQstats$cv[,high], type='l', col = colRamp)
matplot(bothQstats$cv[,av], type='l', col = colRamp)
matplot(bothQstats$cv[,lowish], type='l', col = colRamp)
matplot(bothQstats$cv[,low], type='l', col = colRamp)
high=c(1,2,9,14,15,21)
low=c(4,8)
av=c(3,5,6,7,10,11,12,13,16,17,18,19,20)
par(mfcol=c(3,1))
matplot(bothQstats$cv[,high], type='l', col = colRamp)
matplot(bothQstats$cv[,av], type='l', col = colRamp)
matplot(bothQstats$cv[,low], type='l', col = colRamp)
matplot(bothQstats$cv, type='l', col = colRamp)
install.packages("caTools")
#running standard deviation of managers outflow
library(caTools)
par(mfcol=c(2,5))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
par(mfrow=c(2,2)) #**
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
#set only S to change
q.argS<- list(list("min"=1, "max"=maxDays), list("min"=13, "max"=14))
sLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argS, nboot=1)
out_S<-modelRun(sLHS$data)
#set only M to change
q.argM<- list(list("min"=13, "max"=14), list("min"=1, "max"=maxDays))
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
out_M<-modelRun(mLHS$data)
q.argS<- list(list("min"=1, "max"=maxDays), list("min"=13, "max"=15))
sLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argS, nboot=1)
out_S<-modelRun(sLHS$data)
#set only M to change
q.argM<- list(list("min"=13, "max"=15), list("min"=1, "max"=maxDays))
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
out_M<-modelRun(mLHS$data)
cleanData<-function(LHSrun){
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
wy_stor<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
maxStor<-matrix(data= NA, nrow=196, ncol=21)
reps = seq(1, length(LHSrun), 21)
count=0
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][,j]<- LHSrun[[reps[j]+count]][,5]
wy_stor[[i]][,j]<- LHSrun[[reps[j]+count]][,3]
}
count=count+1
maxStor[,i]<- LHSrun[[i]][,1]
}
out<-list(wy_Q, wy_stor, maxStor)
names(out)<-(c("Q", "stor", "maxStor"))
return(out)
}
both<-cleanData(outB)
sOut<-cleanData(out_S)
mOut<-cleanData(out_M)
par(mfrow=c(2,2)) #show difference in sensitivity between m and s
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
mLHS$data['m']
mLHS$data['s']
sLHS$data['s']
sLHS$data['m']
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
par(mfrow=c(4,1))
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
StorSensPlot(bothLHS, maxDays, wy, 's', both)
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
par(mfrow=c(2,2)) #show difference in sensitivity between m and s
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
hml<-c(3,4,20)
par(mfcol=c(2,5))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
par(mfcol=c(2,3))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
q.argM<- list(list("min"=13, "max"=15), list("min"=1, "max"=maxDays))
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
out_M<-modelRun(mLHS$data)
hml<-c(4,3,20)
par(mfcol=c(2,3))
for (wy in hml){
StorSensPlot(bothLHS, maxDays, wy, 'm', both)
QSensPlot(bothLHS, maxDays, wy, 'm', both)
}
q.argM<- list(list("min"=13, "max"=15), list("min"=1, "max"=maxDays))
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
out_M<-modelRun(mLHS$data)
View(Qsum)
mean(Qsum)
median(Qsum)
par(mfrow=c(2,2)) #show difference in sensitivity between m and s
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(sLHS, maxDays, wy, 's', sOut)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(sLHS, maxDays, wy, 's', sOut)
#set only M to change
q.argM<- list(list("min"=6, "max"=8), list("min"=1, "max"=maxDays))
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
out_M_lowS<-modelRun(mLHS$data)
mOut_sl<-cleanData(out_M_lowS)
mLHS_low<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
mLHS<-LHS(model = NULL, factors, N=n, q='qdunif', q.argM, nboot=4)
par(mfrow=c(2,2)) #show difference in sensitivity between m and s
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl)
wy=10
par(mfrow=c(2,2)) #show difference in sensitivity between m and s
StorSensPlot(mLHS, maxDays, wy, 'm', mOut)
StorSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl)
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl)
StorSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl)
StorSensPlot(mLHS_low, maxDays,10, 'm', mOut_sl)
StorSensPlot(mLHS_low, maxDays,14, 'm', mOut_sl)
StorSensPlot(mLHS_low, maxDays,15, 'm', mOut_sl)
View(mLHS_low)
View(mOut_sl)
matplot(mOut_sl$stor[[wy]], type='l', col = colRamp, ylim=c(390000, 1100000))
matplot(mOut_sl$stor[[5]], type='l', col = colRamp, ylim=c(390000, 1100000))
matplot(mOut_sl$stor[[15]], type='l', col = colRamp, ylim=c(390000, 1100000))
matplot(mOut_sl$stor[[20]], type='l', col = colRamp, ylim=c(390000, 1100000))
StorSensPlot<-function(LHS, vals, wy, sm, dataOut){
paramVal<-data.matrix(LHS$data[sm])
colRamp<-pal(vals)[as.numeric(cut(paramVal,breaks = vals))]
plt<-matplot(dataOut$stor[[wy]], type='l', col = colRamp, ylim=c(300000, 1100000))+
ColorLegend(x='topleft', cols = pal(vals), labels=1:vals, cntrlbl=TRUE) +
lines(dataOut$maxStor[,wy], type='l') #max storage
return(plt) ### color coded to m/s values
}
matplot(mOut_sl$stor[[20]], type='l', col = colRamp, ylim=c(390000, 1100000))
matplot(mOut_sl$stor[[20]], type='l', col = colRamp, ylim=c(300000, 1100000))
wy=10
par(mfrow=c(2,2)) #show difference in sensitivity between m when s is set at 7 or 14
StorSensPlot(mLHS, maxDays, wy, 'm', mOut) #s=14
StorSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl) #s=7
QSensPlot(mLHS, maxDays, wy, 'm', mOut)
QSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl)
StorSensPlot(mLHS, maxDays, wy, 'm', mOut) #s=14
StorSensPlot(mLHS_low, maxDays, wy, 'm', mOut_sl) #s=7
