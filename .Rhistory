FC$qo[257] > (FC$qo[257-1] + 500)
FC$qo[257] < (FC$qo[257-1] - 500))
FC$qo[257] < (FC$qo[257-1] - 500)
round((FC$qo[257] - FC$qo[257-1])/500)
FC$qo[257] - FC$qo[257-1])
FC$qo[257] - FC$qo[257-1]
ramprate <- function(qo, stor){
if (day > 10 && qo[day] < (qo[day-1] - 500)){
dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
if (dD > jul) {dD=jul}
qo[day:dD] <- qo[day:dD] + 500
dS[day:dD] <- (Qin[day:dD]-qo[day:dD])*f2v
} else if (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day:dD] <- qo[day:dD]+500
dS[day:dD] <- (Qin[day:dD]-qo[day:dD])*f2v
} else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
#-------------------------------------------------------------
#   set up blank matricies
#------------------------------------------------------------
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
minFCq=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#---------------------------------------------------------------
#   determine change in storage and outflow for any day of year
#---------------------------------------------------------------
#select Qin from matrix or array? - turn into funtion
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Determine Qmin
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
resS <- changeS(Qin, day, stor, maxS[day], minFCq[day])
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
for (day in 1:jul){
ramprate(qo[,], stor[,])
}
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-minFCq[,]
}
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
wy = 1
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Determine Qmin
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
resS <- changeS(Qin, day, stor, maxS[day], minFCq[day])
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
View(qo)
qo[]
qo
for (day in 1:jul){
ramprate(qo, stor)
}
View(qo)
ramprate <- function(qo, stor){
if (day > 10 && qo[day] < (qo[day-1] - 500)){
dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
if (dD > jul) {dD=jul}
qo[day:dD] <- qo[day:dD] + 500
dS[day:dD] <- (Qin[day:dD]-qo[day:dD])*f2v
} else if (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day:dD] <- qo[day:dD]+500
dS[day:dD] <- (Qin[day:dD]-qo[day:dD])*f2v
} else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dS"=dSN, "qo"=qoN, "stor"=storN))
return(outlist)
}
for (day in 1:jul){
ramprate(qo, stor)
}
ramprate <- function(qo, stor){
if (day > 10 && qo[day] < (qo[day-1] - 500)){
dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
if (dD > jul) {dD=jul}
qo[day:dD] <- qo[day:dD] + 500
dS[day:dD] <- (Qin[day:dD]-qo[day:dD])*f2v
} else if (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day:dD] <- qo[day:dD]+500
dS[day:dD] <- (Qin[day:dD]-qo[day:dD])*f2v
} else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dSN"=dS, "qoN"=qo, "storN"=stor))
return(outlist)
}
for (day in 1:jul){
ramprate(qo, stor)
}
for (day in 1:jul){
rr=ramprate(qo, stor)
}
View(rr)
View(rr)
rr$qoN
View(qo)
day =30
(day > 10 && qo[day] < (qo[day-1] - 500))
(day >10 && qo[day] > (qo[day-1] + 500))
dD <- day + round((qo[day] - qo[day-1])/500)
(dD > jul)
qo[day:dD]
qo[day:dD]+500
ramprate <- function(qo, stor){
if (day > 10 && qo[day] < (qo[day-1] - 500)){
dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- dS[day]+500
qo[(day+1):dD] <- qo[(day+1):dD] + 500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} else if (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- dS[day]+500
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dSN"=dS, "qoN"=qo, "storN"=stor))
return(outlist)
}
for (day in 1:jul){
rr=ramprate(qo, stor)
}
rr$qoN
day =30
qo[day] > (qo[day-1] + 500)
(day >10 && qo[day] > (qo[day-1] + 500))
dD <- day + round((qo[day] - qo[day-1])/500)
qo[day] <- qo[day]-500
qo[day]
dS[day] <- dS[day]+500
dS[day]
qo[(day+1):dD]
qo[(day+1):dD]+500
qo[(day+1):dD] <- qo[(day+1):dD]+500
qo[(day+1):dD]
(Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD]
dS[(day+1):dD]
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
dS[(day+1):dD]
stor[day:dD]
stor[day:dD] <- stor[day:dD] + dS[day:dD]
stor[day:dD]
View(qo)
View(dS)
ramprate <- function(qo, stor){
if (day > 10 && qo[day] < (qo[day-1] - 500)){
dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD] + 500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} else if (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dSN"=dS, "qoN"=qo, "storN"=stor))
return(outlist)
}
#-------------------------------------------------------------
for (day in 1:jul){
rr=ramprate(qo, stor)
}
rr$qoN
ramprate <- function(qo, stor){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo is much less than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while(day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dSN"=dS, "qoN"=qo, "storN"=stor))
return(outlist)
}
ramprate <- function(qo, stor){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo is much less than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while(day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} #else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dSN"=dS, "qoN"=qo, "storN"=stor))
return(outlist)
}
for (day in 1:jul){
rr=ramprate(qo, stor)
}
rr$qoN
View(qo)
day =3-
day=30
qo[day] > (qo[day-1] + 500)
day + round((qo[day] - qo[day-1])/500)
dD <- day + round((qo[day] - qo[day-1])/500)
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
qo
qo[day] > (qo[day-1] + 500)
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
qo[(day):dD]
qo[day] > (qo[day-1] + 500))
qo[day] > (qo[day-1] + 500)
(day >10 && qo[day] > (qo[day-1] + 500))
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
minFCq=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
wy=1
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Determine Qmin
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
resS <- changeS(Qin, day, stor, maxS[day], minFCq[day])
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
qo[28:40]
for (day in 1:jul){
rr=ramprate(qo, stor)
}
rr$qoN[28:40]
day=30
while (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
}
qo[28:40]
stor[day:dD] <- stor[day:dD] + dS[day:dD]
ramprate <- function(qo, stor){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo is much less than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while (day >10 && qo[day] > (qo[day-1] + 500)){
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} #else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
# outlist<-(list("dSN"=dS, "qoN"=qo, "storN"=stor))
#return(outlist)
}
qo[28:40]
for (day in 1:jul){
rr=ramprate(qo, stor)
}
qo[28:40]
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Determine Qmin
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
resS <- changeS(Qin, day, stor, maxS[day], minFCq[day])
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
for (day in 1:jul){
rr=ramprate(qo, stor)
}
qo[28:40]
for (day in 1:jul){
ramprate(qo, stor)
}
qo[28:40]
ramprate <- function(qo, stor){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while (day >10 && qo[day] > (qo[day-1] + 500)){#todays qo > 500cfs than yesterday
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
} #else{}
stor[day:dD] <- stor[day:dD] + dS[day:dD]
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
for (day in 1:jul){
rr=ramprate(qo, stor)
}
rr$qo[28:40]
ramprate <- function(qo, stor){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while (day >10 && qo[day] > (qo[day-1] + 500)){#todays qo > 500cfs than yesterday
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} #else{}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
for (day in 1:jul){ #this isn't working, bc its not saving output from the while loop?
rr=ramprate(qo, stor)
}
rr$qo[28:40]
ramprate <- function(qo, stor, day){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while (day >10 && qo[day] > (qo[day-1] + 500)){#todays qo > 500cfs than yesterday
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} #else{}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
ramprate <- function(qo, stor){
for (day in 1:jul){
#if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
# dD <- day - round((qo[day] - qo[day-1])/500) #days to distribute water over
#  if (dD > jul) {dD=jul}
#qo[day] <- qo[day]-500
#dS[day] <- Qin[day]- (qo[day]*f2v)
#qo[(day+1):dD] <- qo[(day+1):dD] + 500
#dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
#} else if
while (day >10 && qo[day] > (qo[day-1] + 500)){#todays qo > 500cfs than yesterday
dD <- day + round((qo[day] - qo[day-1])/500)
if (dD > jul) {dD=jul}
qo[day] <- qo[day]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
qo[(day+1):dD] <- qo[(day+1):dD]+500
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} #else{}
}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
rr=ramprate(qo, stor)
rr$qo
