} else{q_out[i,1]=0}
#rules for risk averse manager (always -5% of rule curve)
if (res[i,6] > (rc[i+1]*0.95)){
q_out[i,2] = (res[i,6]+q_in[i]- (rc[i+1]*0.95))
} else if (res[i,6] < rc[i+1]){q_out[i,2] = 0
} else{q_out[i,2]=0
}
#rules for manager that are dependent on the month of the year
if (res[i,7] > rc[i+1] && i > 6){
q_out[i,3] = 0
} else if (res[i,7] > rc[i+1] && i < 6 && i>2 ){q_out[i,3] = res[i,7] - (rc[i+1]*0.9)
} else if (res[i,7] > rc[i+1] && i < 3){q_out[i,3] = res[i,7]*0.95
} else if (res[i,7] < rc[i+1]){q_out[i,3] = 0
} else{q_out[i,3]=0
}
#rules for manager that are based on reservoir level
if (res[i,8] > (rc[i+1]-(rc[i+1]*0.1))){
q_out[i,4] = (res[i,8]*0.1)
} else if (res[i,8] < rc[i+1]){q_out[i,4] = 0
} else{q_out[i,4]=0
}
#add sreamflow to current reservoir storage
res[i+1,5]=res[i,5]+q_in[i]-q_out[i,1]
res[i+1,6]=res[i,6]+q_in[i]-q_out[i,2]
res[i+1,7]=res[i,7]+q_in[i]-q_out[i,3]
res[i+1,8]=res[i,8]+q_in[i]-q_out[i,4]
}
resL<-data.frame(res[,])
print(resL)
}
resOut(int, q_in)
resOut<-function(int, q_in) {
# a reservoir has a storage capacity of 100% Each "reservoir" corresponds to a different management scenario
res<- matrix(data= NA, nrow = 12, ncol = 9)
rc<-as.numeric(c(80,80,60,40,40,30,30,40,50,80,95,100))
# generate run based on input$int from ui.R
res[1,]<- int
res[1:12,1]=c(1:12) # order of plotting Oct-Sept
res[1:12,2]<-months
res[,3]<-rc[1:12] #rule curve data
res[,4]<- round(q_in)
# discharge is a funtion of the reservoir managers attributes
q_out<- matrix(data= NA, nrow = 11, ncol = 4) # this is t-1 length
for(i in 1:11){
#rules for less risk averse manager (always +5% of rule curve)
if (res[i,5] >= (rc[i+1]*1.05)){
q_out[i,1] = res[i,5]+q_in[i] - (rc[i+1]*1.05)
} else if (res[i,5] < rc[i+1]){q_out[i,1] = 0
} else{q_out[i,1]=0}
#rules for risk averse manager (always -5% of rule curve)
if (res[i,6] > (rc[i+1]*0.95)){
q_out[i,2] = (res[i,6]+q_in[i]- (rc[i+1]*0.95))
} else if (res[i,6] < rc[i+1]){q_out[i,2] = 0
} else{q_out[i,2]=0
}
#rules for manager that are dependent on the month of the year
if (res[i,7] > rc[i+1] && i > 6){
q_out[i,3] = 0
} else if (res[i,7] > rc[i+1] && i < 6 && i>2 ){q_out[i,3] = res[i,7] - (rc[i+1]*0.9)
} else if (res[i,7] > rc[i+1] && i < 3){q_out[i,3] = res[i,7]*0.95
} else if (res[i,7] < rc[i+1]){q_out[i,3] = 0
} else{q_out[i,3]=0
}
#rules for manager that are based on reservoir level
if (res[i,8] > (rc[i+1]-(rc[i+1]*0.1))){
q_out[i,4] = (res[i,8]*0.1)
} else if (res[i,8] < rc[i+1]){q_out[i,4] = 0
} else{q_out[i,4]=0
}
#add sreamflow to current reservoir storage
res[i+1,5]=res[i,5]+q_in[i]-q_out[i,1]
res[i+1,6]=res[i,6]+q_in[i]-q_out[i,2]
res[i+1,7]=res[i,7]+q_in[i]-q_out[i,3]
res[i+1,8]=res[i,8]+q_in[i]-q_out[i,4]
}
resL<-data.frame(res[,])
print(resL)
}
resOut(int, q_in)
res<- matrix(data= NA, nrow = 12, ncol = 9)
rc<-as.numeric(c(80,80,60,40,40,30,30,40,50,80,95,100))
# generate run based on input$int from ui.R
res[1,]<- int
res[1:12,1]=c(1:12) # order of plotting Oct-Sept
res[1:12,2]<-months
res[,3]<-rc[1:12] #rule curve data
res[,4]<- round(q_in)
# discharge is a funtion of the reservoir managers attributes
q_out<- matrix(data= NA, nrow = 11, ncol = 4) # this is t-1 length
View(res)
res<- matrix(data= NA, nrow = 12, ncol = 8)
rc<-as.numeric(c(80,80,60,40,40,30,30,40,50,80,95,100))
# generate run based on input$int from ui.R
res[1,]<- int
res[1:12,1]<- c(1:12) # order of plotting Oct-Sept
res[1:12,2]<-months
res[,3]<-rc[1:12] #rule curve data
res[,4]<- round(q_in)
# discharge is a funtion of the reservoir managers attributes
q_out<- matrix(data= NA, nrow = 11, ncol = 4) # this is t-1 length
resOut<-function(int, q_in) {
# a reservoir has a storage capacity of 100% Each "reservoir" corresponds to a different management scenario
res<- matrix(data= NA, nrow = 12, ncol = 8)
rc<-as.numeric(c(80,80,60,40,40,30,30,40,50,80,95,100))
# generate run based on input$int from ui.R
res[1,]<- int
res[1:12,1]<- c(1:12) # order of plotting Oct-Sept
res[1:12,2]<-months
res[,3]<-rc[1:12] #rule curve data
res[,4]<- round(q_in)
# discharge is a funtion of the reservoir managers attributes
q_out<- matrix(data= NA, nrow = 11, ncol = 4) # this is t-1 length
for(i in 1:11){
#rules for less risk averse manager (always +5% of rule curve)
if (res[i,5] >= (rc[i+1]*1.05)){
q_out[i,1] = res[i,5]+q_in[i] - (rc[i+1]*1.05)
} else if (res[i,5] < rc[i+1]){q_out[i,1] = 0
} else{q_out[i,1]=0}
#rules for risk averse manager (always -5% of rule curve)
if (res[i,6] > (rc[i+1]*0.95)){
q_out[i,2] = (res[i,6]+q_in[i]- (rc[i+1]*0.95))
} else if (res[i,6] < rc[i+1]){q_out[i,2] = 0
} else{q_out[i,2]=0
}
#rules for manager that are dependent on the month of the year
if (res[i,7] > rc[i+1] && i > 6){
q_out[i,3] = 0
} else if (res[i,7] > rc[i+1] && i < 6 && i>2 ){q_out[i,3] = res[i,7] - (rc[i+1]*0.9)
} else if (res[i,7] > rc[i+1] && i < 3){q_out[i,3] = res[i,7]*0.95
} else if (res[i,7] < rc[i+1]){q_out[i,3] = 0
} else{q_out[i,3]=0
}
#rules for manager that are based on reservoir level
if (res[i,8] > (rc[i+1]-(rc[i+1]*0.1))){
q_out[i,4] = (res[i,8]*0.1)
} else if (res[i,8] < rc[i+1]){q_out[i,4] = 0
} else{q_out[i,4]=0
}
#add sreamflow to current reservoir storage
res[i+1,5]=res[i,5]+q_in[i]-q_out[i,1]
res[i+1,6]=res[i,6]+q_in[i]-q_out[i,2]
res[i+1,7]=res[i,7]+q_in[i]-q_out[i,3]
res[i+1,8]=res[i,8]+q_in[i]-q_out[i,4]
}
resL<-data.frame(res[,])
print(resL)
}
resOut(int, q_in)
q_out[i,1] = res[i,5] + q_in[i] - (rc[i+1]*1.05)
i=1
#rules for less risk averse manager (always +5% of rule curve)
if (res[i,5] >= (rc[i+1]*1.05)){
q_out[i,1] = res[i,5] + q_in[i] - (rc[i+1]*1.05)
} else if (res[i,5] < rc[i+1]){q_out[i,1] = 0
} else{q_out[i,1]=0}
View(q_out)
View(res)
shiny::runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
runApp('Dropbox/BSU/R/WaterActors/ABM')
library(shiny)
runApp('Dropbox/BSU/R/WaterActors/Tester/tester')
library(devtools)
library(dataRetrieval)
#plug in site number or parameter code and start/end date
siteNo <- "07374000"
pCode <- c("00060" ,"00065")
start.date <- "2004-03-17"
end.date <- "2017-12-31"
miss <-readNWISuv(siteNumbers = siteNo, parameterCd = pCode,startDate = start.date,endDate = end.date)
names(miss)
View(miss)
colnames(miss)<- c("ag", "site", "dateTime","flow", "flcd", "stage","stagecd", "tz")
View(miss)
flOrd<-order(miss$flow)
rank<- 1:419749
hist(flOrd)
flOrd<-data.frame(order(miss$flow), rank)
View(flOrd)
plot(flOrd$rank, flOrd$order.miss.flow.)
flow<-order(miss$flow)
max(flow)
min(flow)
flow<-as.numeric(order(miss$flow))
flow<-data.frame(as.numeric(order(miss$flow)))
View(flow)
View(flow)
flow<-sort(miss$flow)
flow<-data.frame(sort(miss$flow))
View(flow)
flow.uq<-unique(flow)
rank<- 1:912
flow.ix<-order(miss$flow)
View(flow.uq)
flow.rank<-data.frame(flow.uq, rank)
View(flow.rank)
flow2<-flow[flow$sort.miss.flow. == flow.rank$flow.uq, flow.rank$rank]
flow2<-flow[flow$sort.miss.flow. == flow.rank$flow.uq,]
flow2
flow2<- merge(flow, flow.rank, by="srt.miss.flow.")
flow2<- merge(flow, flow.rank, by="sort.miss.flow.")
View(flow2)
flow2$recInt<- rank/418885
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$sort.miss.flow.), unique(flow2$recInt))
flow<-data.frame(sort(miss$flow), decreasing=FALSE)
flow.uq<-unique(flow)
flow.rank<-data.frame(flow.uq, rank)
flow2<- merge(flow, flow.rank, by="sort.miss.flow.")
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$sort.miss.flow.), unique(flow2$recInt))
flow<-data.frame(sort(miss$flow), decreasing=TRUE)
flow.uq<-unique(flow)
rank<- 1:912
flow.rank<-data.frame(flow.uq, rank)
flow2<- merge(flow, flow.rank, by="sort.miss.flow.")
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$sort.miss.flow.), unique(flow2$recInt))
flow<-data.frame(sort(miss$flow, decreasing=TRUE))
#flow.ix<-order(miss$flow) #index of low to high
flow.uq<-unique(flow)
rank<- 1:912
flow.rank<-data.frame(flow.uq, rank)
flow2<- merge(flow, flow.rank, by="sort.miss.flow.")
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$sort.miss.flow.), unique(flow2$recInt))
flow<-data.frame(sort(miss$flow, decreasing=FALSE))
#flow.ix<-order(miss$flow) #index of low to high
flow.uq<-unique(flow)
rank<- 1:912
flow.rank<-data.frame(flow.uq, rank)
flow2<- merge(flow, flow.rank, by="sort.miss.flow.")
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$sort.miss.flow.), unique(flow2$recInt))
colnames(flow[1]) <-c("miss.flow")
colnames(flow)
colnames(flow$sort.miss.flow..decreasing...FALSE.) <-"miss.flow"
colnames(flow) <-"miss.flow"
colnames(flow.rank) <-c("miss.flow", "rank")
flow2<- merge(flow, flow.rank, by="miss.flow")
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$sort.miss.flow.), unique(flow2$recInt))
plot(unique(flow2$miss.flow), unique(flow2$recInt))
flow<-data.frame(sort(miss$flow, decreasing=TRUE))
#flow.ix<-order(miss$flow) #index of low to high
flow.uq<-unique(flow)
rank<- 1:912
flow.rank<-data.frame(flow.uq, rank)
colnames(flow) <-"miss.flow"
colnames(flow.rank) <-c("miss.flow", "rank")
flow2<- merge(flow, flow.rank, by="miss.flow")
flow2$recInt<- flow2$rank/418885
plot(unique(flow2$miss.flow), unique(flow2$recInt))
plot(unique(flow2$miss.flow), unique(flow2$recInt), typ="l")
flow2$exd<- flow2$rank/418885
flow2$recInt<-1/flow2$exd
#exceedence probability
plot(unique(flow2$miss.flow), unique(flow2$recInt), typ="l")
plot(miss.stage, miss.flow, type='l')
plot(miss$stage, miss$flow, type='l')
plot(miss$stage, miss$flow)
flow2$recInt[flow2$miss.flow == 747000]
2880 * 1405
unique(flow2$recInt[flow2$miss.stage == 30])
flow2$recInt[flow2$miss.stage == 30]
unique(flow2$recInt[flow2$stage == 30])
1405/2880
unique(miss$flow[miss$stage ==35])
miss$flow[miss$stage ==35]
max(miss$stage)
flow2$recInt[flow2$miss.flow == 963000]
5108/2880
con<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
con<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
plot(1:45, con)
plot(con, 1:45, typ='l')
plot(1:45, con)
plot(1:45, con, typ='l')
mod1<-lm(miss$flow[miss$stage < 30] ~ miss$stage[miss$stage < 30])
summary(mod1)
mod2<-lm(miss$flow[miss$stage >= 30] ~ miss$stage[miss$stage >= 30])
summary(mod1)
ANS<-predict(mod2, 30:45)
plot(unique(flow2$miss.flow), unique(flow2$exd), typ="l")
#import, sum storage for Anderson Ranch, Arrowrock, and Lucky Peak Reservoirs
setwd("~/Documents/GitRepos/ReservoirModeling")
#setwd("D:/Documents/GitRepos/ReservoirModel")
#--------------------------------------
# Import reservoir data
#--------------------------------------
# missing data was replaced by average of bracketing values
res<-read.csv("Data/BRB_reservoir_data_1997-2018_noleap.csv")
res$Date <-as.Date(res$Date, format ="%m/%d/%y")
res$totAF<- res$andAF +res$arkAF +res$lucAF
res$qoV<-res$qo*24*60*60*.0000229569 #convert from flow rate (cfs) to volume (acre-feet)
res$resid<- res$in_unreg- res$in_computed
res$Y = as.numeric(format(res$Date, format = "%Y"))
res$M = as.numeric(format(res$Date, format = "%m"))
res$WY[res$M <10]= res$Y[res$M <10]
res$WY[res$M >= 10] = res$Y[res$M >= 10]+1
lowell<-read.csv("Data/lowell_data.csv")
res$low<-lowell$low_af
# load Rule Curve data --------
fv<-read.csv("Data/ForecastVol.csv")
fcVol<-read.csv("Data/FloodControlVol.csv", header=FALSE) #DOY, date, volumes
fcVol[,3:36]<- fcVol[,3:36]*1000 #bc flood control space is in 1000 ac-ft see plate 7-1 in the WCM
fcVol$V2<- as.Date(fcVol$V2, format ="%m/%d/%Y")
prj<-read.csv("Data/Inflw_prj.csv") #coefficients for projection eqn
prjAP<-read.csv("Data/Inflw_prjAPril1.csv") #coefficients for projection eqn after April 1
wfc<-read.csv("Data/plate7-2.csv") #winter flood control space
qlim<- read.csv("Data/MaxQ.csv", header = FALSE) #discharge mins and maxes
#conversions from vol to flow (ac-ft to cfs)
v2f<-43560.000443512/(24*60*60)
f2v<-24*60*60*.0000229569
#Reservoir Storage from WCM
minQ<-240
maxAF<-1010188
minS<-  41000 +11630+ 28767 #total inactive capacity AND, ARK, LP
#subset (DOY 1: July 31st) from full timeseries -----
jul=196 #change to 212 #july 31st once update fcVol csv
reps <-100
idx<-which(res$doy >= 1 & res$doy <= jul)
rows<- length(idx)
FC<- data.frame(res$doy[idx],res$WY[idx], res$totAF[idx], res$in_unreg[idx], res$qo[idx])
colnames(FC)<-c("doy", "WY", "AF", "Q", "Qo")
yrs<- 1998:2018
#calculate daily forecast values
forecast<-read.csv("Data/LP_coordinatedForecasts.csv")
volF<-vector(length = nrow(FC))
for (i in 1:nrow(FC)){
if (any(forecast$wy == FC$WY[i] & forecast$doy == FC$doy[i])){
ii=which(forecast$wy == FC$WY[i] & forecast$doy == FC$doy[i])
volF[i] <- forecast$ForecastVol[ii]
} else{volF[i] <- volF[i-1] - FC$Q[i-1]*f2v}
}
FC<-cbind(FC, volF)
FC$volF[FC$volF < 0] <- 0
#find the index of the first doy
doy1<-matrix(data=NA, ncol=1, nrow=21)
for (wy in 1:21){
doy1[wy]<- which(FC$WY == yrs[wy] & FC$doy == 1)
}
##--------------------------------------
#       DEFINE FUNCTIONS
##--------------------------------------
# REQUIRED storage - lookup day of year, inflow volume
# plate 7-1 and plate 7-3 - Needs sum of timeseries
resStor<- function(sumQin,doy){
fvol<-round(sumQin/1000000, digits=1)
fcol<- as.numeric(fv$col[fv$fv == fvol])
stor<- as.numeric(fcVol[doy, fcol+2])
#Winter flood control space (low flow years Plate 7-2) ----
if (doy < 91 && fvol > 1.2 && fvol < 1.8){
wcol<- as.numeric(fv$wcol[fv$wfc == fvol])
stor<- as.numeric(wfc[doy,wcol])
}
if (is.na(stor) == TRUE){
stor<- as.numeric(fcVol[doy, fcol+2])
}
#required storage volume
outList<-(list("stor" = stor))
return(outList)
}
# CHANGE STORAGE - based on current storage, minimum discharge and ramping rates
#needs whole timeseries and maxS of any given day
changeS<- function(Qin, day, stor, maxS, Qmin){ #consider if these all need to be here
if (stor[day] >= maxS) {#if S > max AF, change of volume in reservoir
dS[day] <- maxS - stor[day] - (Qin[day]*f2v) #calculate ∆ volume of water in the reservoir
qo[day] <- -dS[day]*v2f
} else {
qo[day] <- Qmin
dS[day] <- (Qin[day]- Qmin)*f2v
}
if (stor[day] <= minS){ #dont let storage go below the minimum
qo[day] <- minQ
dS[day] <- -minQ*f2v
}
if (day < jul){
stor[day+1]<-stor[day] + dS[day]  #AF in the reservoir
}
outlist<-(list("stor"=stor, "dS"=dS, "qo"=qo, "day"=day))
return(outlist)
}
#determine minimum daily release before April 1
minRelease<- function(){
ix= which(prj$start <= day & prj$end >= day)
vol1 = volF*prj$b[ix] + prj$c[ix]
if (prj$start[ix] != day){
vol2 = volF*prj$b[ix+1] + prj$c[ix+1]
frac = (day - prj$start[ix])/(prj$end[ix]-prj$start[ix])
volFmar <-  frac*vol1 + (1-frac)*vol2
} else {volFmar = vol1}
volFresid <- volF - volFmar
FCvolAP<- resStor(volFresid, 91) #flood control space required on april 1
minEvac<- FCvolAP$stor - stor[day] #minimum evaculation btw today and April 1
minReleaseVol <- minEvac+volFmar
Qmin<- (minReleaseVol*v2f)/(jul-day+1) #associated  qmin
}
#determine minimum daily release after April 1
minReleaseApril<-function(){
ix30 = findInterval(day, prjAP$doy)
ix15=ix30-1
volF_target15 <- volF*prjAP$b[ix15] + prjAP$c[ix15]
volF_target30 <- volF*prjAP$b[ix30] + prjAP$c[ix30]
residual15<- volF-volF_target15
residual30<- volF- volF_target30
if (day < jul-30){
FCvol30<- resStor(residual30, day+30)
minEvac30 <- FCvol30$stor - stor[day]
minReleaseVol30 <- minEvac30 + volF_target30
q30<-(minReleaseVol30*v2f)/(jul-day+1)
} else {q30 <- minQ}
if (day < jul-15){
FCvol15<-resStor(residual15, day+15)
minEvac15 <- FCvol15$stor - stor[day]
minReleaseVol15 <- minEvac15 + volF_target15
q15<-(minReleaseVol15*v2f)/(jul-day+1)
} else {q15 <- minQ}
Qmin<- max(q15, q30)
}
#Ramping rate is +/- 500 cfs per day  --> distributes the water over following days
ramprate <- function(qo, stor){
for (day in 1:jul){
if (day > 10 && qo[day] < (qo[day-1] - 500)){ #todays qo < 500cfs than yesterdays
Q=qo[day]
qo[day] <- qo[day-1]-500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
}else if (day >10 && qo[day] > (qo[day-1] + 500)){
#todays qo > 500cfs than yesterday
#kinda works - line by line, but something is wrong w looping or something
Q=qo[day]
qo[day] <- qo[day-1]+500
dS[day] <- Qin[day]- (qo[day]*f2v)
Qd<-Q-qo[day]
dD <- day + round((Qd)/500)
if (dD > jul) {dD=jul}
qo[(day+1):dD] <- qo[(day+1):dD]+ Qd/(round((Qd)/500))
dS[(day+1):dD] <- (Qin[(day+1):dD]-qo[(day+1):dD])*f2v
stor[day:dD] <- stor[day:dD] + dS[day:dD]
} else{qo[day]<-qo[day]}
}
outlist<-(list("dS"=dS, "qo"=qo, "stor"=stor))
return(outlist)
}
#-------------------------------------------------------------
#   set up blank matricies
#------------------------------------------------------------
resS=matrix(data=NA, nrow = jul, ncol = 1)
stor=matrix(data=NA, nrow = jul, ncol = 1)
maxS=matrix(data=NA, nrow = jul, ncol = 1)
dS=matrix(data=NA, nrow = jul, ncol = 1)
minFCq=matrix(data=NA, nrow = jul, ncol = 1)
qo=matrix(data=NA, nrow = jul, ncol = 1)
#---------------------------------------------------------------
#   determine change in storage and outflow for any day of year
#---------------------------------------------------------------
#select Qin from matrix or array? - turn into funtion
for (wy in 1:21){
stor[1]<-FC$AF[doy1[wy]] #initialize with actual storage on Jan 1
Qin<- FC$Q[FC$WY == yrs[wy]]
for (day in 1:jul){
volF= FC$volF[FC$WY == yrs[wy] & FC$doy == day] #todays forecasted inflow
if (volF >= 0){
maxSday<- resStor(volF, day)
storD<-maxSday$stor
} else {storD <- 0}
maxS[day] <- maxAF-storD #max storage today given the whole years inflow
#Determine Qmin
if (day < 91){
minFCq[day]<-minRelease()
} else {
minFCq[day]<-minReleaseApril()
}
#minimum discharge is 240
if (minFCq[day] <= minQ){
minFCq[day] <- minQ
}
resS <- changeS(Qin, day, stor, maxS[day], minFCq[day])
qo[day]<-resS$qo[day]
dS[day]<- resS$dS[day]
if (day < jul){
stor[day+1]<-resS$stor[day+1] #AF in the reservoir
}
}
#rr=ramprate(qo, stor)
#save intial run output ----
FC$qo[FC$WY == yrs[wy]]<-qo[,]
FC$stor[FC$WY == yrs[wy]]<-stor[,]
FC$maxS[FC$WY == yrs[wy]]<-maxS[,]
FC$Qmin[FC$WY == yrs[wy]]<-minFCq[,]
}
for (wy in 1:21){
plot(FC$maxS[FC$WY == yrs[wy]], type='l', ylim=c(300000, 1010200))
lines(FC$stor[FC$WY == yrs[wy]], col='orange')
lines(FC$AF[FC$WY == yrs[wy]], col='green')
#plot(Qmin, type='l', col='blue', ylim=c(0,16000))
plot(FC$qo[FC$WY == yrs[wy]], type='l', lty=3, col='orange', ylim=c(0,16000))
lines(qlim[,2], type='l', lty=3, col='grey17')
lines(FC$Qo[FC$WY == yrs[wy]], type='l', lty=5, lwd='1', col='skyblue1') #manged outflow
}
